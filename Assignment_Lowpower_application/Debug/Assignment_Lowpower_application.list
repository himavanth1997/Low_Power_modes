
Assignment_Lowpower_application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025e4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080026a4  080026a4  000126a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026c0  080026c0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080026c0  080026c0  000126c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080026c8  080026c8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026c8  080026c8  000126c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026cc  080026cc  000126cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080026d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  2000000c  080026dc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  080026dc  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000060be  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000014f6  00000000  00000000  000260f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000708  00000000  00000000  000275e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000640  00000000  00000000  00027cf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00012e79  00000000  00000000  00028330  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006b76  00000000  00000000  0003b1a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00074ce0  00000000  00000000  00041d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b69ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000017a0  00000000  00000000  000b6a7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800268c 	.word	0x0800268c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	0800268c 	.word	0x0800268c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f830 	bl	80002b4 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	0415      	lsls	r5, r2, #16
 8000268:	0c2d      	lsrs	r5, r5, #16
 800026a:	002e      	movs	r6, r5
 800026c:	b580      	push	{r7, lr}
 800026e:	0407      	lsls	r7, r0, #16
 8000270:	0c14      	lsrs	r4, r2, #16
 8000272:	0c3f      	lsrs	r7, r7, #16
 8000274:	4699      	mov	r9, r3
 8000276:	0c03      	lsrs	r3, r0, #16
 8000278:	437e      	muls	r6, r7
 800027a:	435d      	muls	r5, r3
 800027c:	4367      	muls	r7, r4
 800027e:	4363      	muls	r3, r4
 8000280:	197f      	adds	r7, r7, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	469c      	mov	ip, r3
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2380      	movs	r3, #128	; 0x80
 800028e:	025b      	lsls	r3, r3, #9
 8000290:	4698      	mov	r8, r3
 8000292:	44c4      	add	ip, r8
 8000294:	464b      	mov	r3, r9
 8000296:	4343      	muls	r3, r0
 8000298:	4351      	muls	r1, r2
 800029a:	0c25      	lsrs	r5, r4, #16
 800029c:	0436      	lsls	r6, r6, #16
 800029e:	4465      	add	r5, ip
 80002a0:	0c36      	lsrs	r6, r6, #16
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	19a4      	adds	r4, r4, r6
 80002a6:	195b      	adds	r3, r3, r5
 80002a8:	1859      	adds	r1, r3, r1
 80002aa:	0020      	movs	r0, r4
 80002ac:	bc0c      	pop	{r2, r3}
 80002ae:	4690      	mov	r8, r2
 80002b0:	4699      	mov	r9, r3
 80002b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b4 <__udivmoddi4>:
 80002b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b6:	464f      	mov	r7, r9
 80002b8:	4646      	mov	r6, r8
 80002ba:	46d6      	mov	lr, sl
 80002bc:	b5c0      	push	{r6, r7, lr}
 80002be:	0004      	movs	r4, r0
 80002c0:	b082      	sub	sp, #8
 80002c2:	000d      	movs	r5, r1
 80002c4:	4691      	mov	r9, r2
 80002c6:	4698      	mov	r8, r3
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d82f      	bhi.n	800032c <__udivmoddi4+0x78>
 80002cc:	d02c      	beq.n	8000328 <__udivmoddi4+0x74>
 80002ce:	4641      	mov	r1, r8
 80002d0:	4648      	mov	r0, r9
 80002d2:	f000 f8cf 	bl	8000474 <__clzdi2>
 80002d6:	0029      	movs	r1, r5
 80002d8:	0006      	movs	r6, r0
 80002da:	0020      	movs	r0, r4
 80002dc:	f000 f8ca 	bl	8000474 <__clzdi2>
 80002e0:	1a33      	subs	r3, r6, r0
 80002e2:	469c      	mov	ip, r3
 80002e4:	3b20      	subs	r3, #32
 80002e6:	469a      	mov	sl, r3
 80002e8:	d500      	bpl.n	80002ec <__udivmoddi4+0x38>
 80002ea:	e076      	b.n	80003da <__udivmoddi4+0x126>
 80002ec:	464b      	mov	r3, r9
 80002ee:	4652      	mov	r2, sl
 80002f0:	4093      	lsls	r3, r2
 80002f2:	001f      	movs	r7, r3
 80002f4:	464b      	mov	r3, r9
 80002f6:	4662      	mov	r2, ip
 80002f8:	4093      	lsls	r3, r2
 80002fa:	001e      	movs	r6, r3
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d828      	bhi.n	8000352 <__udivmoddi4+0x9e>
 8000300:	d025      	beq.n	800034e <__udivmoddi4+0x9a>
 8000302:	4653      	mov	r3, sl
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5a>
 800030c:	e07b      	b.n	8000406 <__udivmoddi4+0x152>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	4652      	mov	r2, sl
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4662      	mov	r2, ip
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e018      	b.n	800035a <__udivmoddi4+0xa6>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9d0      	bls.n	80002ce <__udivmoddi4+0x1a>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8a>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b002      	add	sp, #8
 8000344:	bc1c      	pop	{r2, r3, r4}
 8000346:	4690      	mov	r8, r2
 8000348:	4699      	mov	r9, r3
 800034a:	46a2      	mov	sl, r4
 800034c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800034e:	42a3      	cmp	r3, r4
 8000350:	d9d7      	bls.n	8000302 <__udivmoddi4+0x4e>
 8000352:	2200      	movs	r2, #0
 8000354:	2300      	movs	r3, #0
 8000356:	9200      	str	r2, [sp, #0]
 8000358:	9301      	str	r3, [sp, #4]
 800035a:	4663      	mov	r3, ip
 800035c:	2b00      	cmp	r3, #0
 800035e:	d0e9      	beq.n	8000334 <__udivmoddi4+0x80>
 8000360:	07fb      	lsls	r3, r7, #31
 8000362:	4698      	mov	r8, r3
 8000364:	4641      	mov	r1, r8
 8000366:	0872      	lsrs	r2, r6, #1
 8000368:	430a      	orrs	r2, r1
 800036a:	087b      	lsrs	r3, r7, #1
 800036c:	4666      	mov	r6, ip
 800036e:	e00e      	b.n	800038e <__udivmoddi4+0xda>
 8000370:	42ab      	cmp	r3, r5
 8000372:	d101      	bne.n	8000378 <__udivmoddi4+0xc4>
 8000374:	42a2      	cmp	r2, r4
 8000376:	d80c      	bhi.n	8000392 <__udivmoddi4+0xde>
 8000378:	1aa4      	subs	r4, r4, r2
 800037a:	419d      	sbcs	r5, r3
 800037c:	2001      	movs	r0, #1
 800037e:	1924      	adds	r4, r4, r4
 8000380:	416d      	adcs	r5, r5
 8000382:	2100      	movs	r1, #0
 8000384:	3e01      	subs	r6, #1
 8000386:	1824      	adds	r4, r4, r0
 8000388:	414d      	adcs	r5, r1
 800038a:	2e00      	cmp	r6, #0
 800038c:	d006      	beq.n	800039c <__udivmoddi4+0xe8>
 800038e:	42ab      	cmp	r3, r5
 8000390:	d9ee      	bls.n	8000370 <__udivmoddi4+0xbc>
 8000392:	3e01      	subs	r6, #1
 8000394:	1924      	adds	r4, r4, r4
 8000396:	416d      	adcs	r5, r5
 8000398:	2e00      	cmp	r6, #0
 800039a:	d1f8      	bne.n	800038e <__udivmoddi4+0xda>
 800039c:	9800      	ldr	r0, [sp, #0]
 800039e:	9901      	ldr	r1, [sp, #4]
 80003a0:	4653      	mov	r3, sl
 80003a2:	1900      	adds	r0, r0, r4
 80003a4:	4169      	adcs	r1, r5
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	db23      	blt.n	80003f2 <__udivmoddi4+0x13e>
 80003aa:	002b      	movs	r3, r5
 80003ac:	4652      	mov	r2, sl
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	002a      	movs	r2, r5
 80003b2:	4664      	mov	r4, ip
 80003b4:	40e2      	lsrs	r2, r4
 80003b6:	001c      	movs	r4, r3
 80003b8:	4653      	mov	r3, sl
 80003ba:	0015      	movs	r5, r2
 80003bc:	2b00      	cmp	r3, #0
 80003be:	db2d      	blt.n	800041c <__udivmoddi4+0x168>
 80003c0:	0026      	movs	r6, r4
 80003c2:	4657      	mov	r7, sl
 80003c4:	40be      	lsls	r6, r7
 80003c6:	0033      	movs	r3, r6
 80003c8:	0026      	movs	r6, r4
 80003ca:	4667      	mov	r7, ip
 80003cc:	40be      	lsls	r6, r7
 80003ce:	0032      	movs	r2, r6
 80003d0:	1a80      	subs	r0, r0, r2
 80003d2:	4199      	sbcs	r1, r3
 80003d4:	9000      	str	r0, [sp, #0]
 80003d6:	9101      	str	r1, [sp, #4]
 80003d8:	e7ac      	b.n	8000334 <__udivmoddi4+0x80>
 80003da:	4662      	mov	r2, ip
 80003dc:	2320      	movs	r3, #32
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	464a      	mov	r2, r9
 80003e2:	40da      	lsrs	r2, r3
 80003e4:	4661      	mov	r1, ip
 80003e6:	0013      	movs	r3, r2
 80003e8:	4642      	mov	r2, r8
 80003ea:	408a      	lsls	r2, r1
 80003ec:	0017      	movs	r7, r2
 80003ee:	431f      	orrs	r7, r3
 80003f0:	e780      	b.n	80002f4 <__udivmoddi4+0x40>
 80003f2:	4662      	mov	r2, ip
 80003f4:	2320      	movs	r3, #32
 80003f6:	1a9b      	subs	r3, r3, r2
 80003f8:	002a      	movs	r2, r5
 80003fa:	4666      	mov	r6, ip
 80003fc:	409a      	lsls	r2, r3
 80003fe:	0023      	movs	r3, r4
 8000400:	40f3      	lsrs	r3, r6
 8000402:	4313      	orrs	r3, r2
 8000404:	e7d4      	b.n	80003b0 <__udivmoddi4+0xfc>
 8000406:	4662      	mov	r2, ip
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e780      	b.n	800031e <__udivmoddi4+0x6a>
 800041c:	2320      	movs	r3, #32
 800041e:	4662      	mov	r2, ip
 8000420:	0026      	movs	r6, r4
 8000422:	1a9b      	subs	r3, r3, r2
 8000424:	40de      	lsrs	r6, r3
 8000426:	002f      	movs	r7, r5
 8000428:	46b0      	mov	r8, r6
 800042a:	4666      	mov	r6, ip
 800042c:	40b7      	lsls	r7, r6
 800042e:	4646      	mov	r6, r8
 8000430:	003b      	movs	r3, r7
 8000432:	4333      	orrs	r3, r6
 8000434:	e7c8      	b.n	80003c8 <__udivmoddi4+0x114>
 8000436:	46c0      	nop			; (mov r8, r8)

08000438 <__clzsi2>:
 8000438:	211c      	movs	r1, #28
 800043a:	2301      	movs	r3, #1
 800043c:	041b      	lsls	r3, r3, #16
 800043e:	4298      	cmp	r0, r3
 8000440:	d301      	bcc.n	8000446 <__clzsi2+0xe>
 8000442:	0c00      	lsrs	r0, r0, #16
 8000444:	3910      	subs	r1, #16
 8000446:	0a1b      	lsrs	r3, r3, #8
 8000448:	4298      	cmp	r0, r3
 800044a:	d301      	bcc.n	8000450 <__clzsi2+0x18>
 800044c:	0a00      	lsrs	r0, r0, #8
 800044e:	3908      	subs	r1, #8
 8000450:	091b      	lsrs	r3, r3, #4
 8000452:	4298      	cmp	r0, r3
 8000454:	d301      	bcc.n	800045a <__clzsi2+0x22>
 8000456:	0900      	lsrs	r0, r0, #4
 8000458:	3904      	subs	r1, #4
 800045a:	a202      	add	r2, pc, #8	; (adr r2, 8000464 <__clzsi2+0x2c>)
 800045c:	5c10      	ldrb	r0, [r2, r0]
 800045e:	1840      	adds	r0, r0, r1
 8000460:	4770      	bx	lr
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	02020304 	.word	0x02020304
 8000468:	01010101 	.word	0x01010101
	...

08000474 <__clzdi2>:
 8000474:	b510      	push	{r4, lr}
 8000476:	2900      	cmp	r1, #0
 8000478:	d103      	bne.n	8000482 <__clzdi2+0xe>
 800047a:	f7ff ffdd 	bl	8000438 <__clzsi2>
 800047e:	3020      	adds	r0, #32
 8000480:	e002      	b.n	8000488 <__clzdi2+0x14>
 8000482:	1c08      	adds	r0, r1, #0
 8000484:	f7ff ffd8 	bl	8000438 <__clzsi2>
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b084      	sub	sp, #16
 8000490:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000492:	f000 fb8f 	bl	8000bb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000496:	f000 f92b 	bl	80006f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800049a:	f000 f9c9 	bl	8000830 <MX_GPIO_Init>
  MX_RTC_Init();
 800049e:	f000 f99d 	bl	80007dc <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  /* Configure RTC */
  RTC_Config();
 80004a2:	f000 fa4d 	bl	8000940 <RTC_Config>

  /* Enable Power Clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 80004a6:	4b8a      	ldr	r3, [pc, #552]	; (80006d0 <main+0x244>)
 80004a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80004aa:	4b89      	ldr	r3, [pc, #548]	; (80006d0 <main+0x244>)
 80004ac:	2180      	movs	r1, #128	; 0x80
 80004ae:	0549      	lsls	r1, r1, #21
 80004b0:	430a      	orrs	r2, r1
 80004b2:	639a      	str	r2, [r3, #56]	; 0x38


  /* training sample for table 1*/
  fit_data(TABLE_OUTLOOK, SET1_SUNNY, YES);
 80004b4:	2200      	movs	r2, #0
 80004b6:	2100      	movs	r1, #0
 80004b8:	2000      	movs	r0, #0
 80004ba:	f000 faa7 	bl	8000a0c <fit_data>
  fit_data(TABLE_OUTLOOK, SET1_SUNNY, YES);
 80004be:	2200      	movs	r2, #0
 80004c0:	2100      	movs	r1, #0
 80004c2:	2000      	movs	r0, #0
 80004c4:	f000 faa2 	bl	8000a0c <fit_data>
  fit_data(TABLE_OUTLOOK, SET1_SUNNY, NO);
 80004c8:	2201      	movs	r2, #1
 80004ca:	2100      	movs	r1, #0
 80004cc:	2000      	movs	r0, #0
 80004ce:	f000 fa9d 	bl	8000a0c <fit_data>
  fit_data(TABLE_OUTLOOK, SET1_SUNNY, NO);
 80004d2:	2201      	movs	r2, #1
 80004d4:	2100      	movs	r1, #0
 80004d6:	2000      	movs	r0, #0
 80004d8:	f000 fa98 	bl	8000a0c <fit_data>
  fit_data(TABLE_OUTLOOK, SET1_SUNNY, NO);
 80004dc:	2201      	movs	r2, #1
 80004de:	2100      	movs	r1, #0
 80004e0:	2000      	movs	r0, #0
 80004e2:	f000 fa93 	bl	8000a0c <fit_data>

  fit_data(TABLE_OUTLOOK, SET1_OVERCAST, YES);
 80004e6:	2200      	movs	r2, #0
 80004e8:	2101      	movs	r1, #1
 80004ea:	2000      	movs	r0, #0
 80004ec:	f000 fa8e 	bl	8000a0c <fit_data>
  fit_data(TABLE_OUTLOOK, SET1_OVERCAST, YES);
 80004f0:	2200      	movs	r2, #0
 80004f2:	2101      	movs	r1, #1
 80004f4:	2000      	movs	r0, #0
 80004f6:	f000 fa89 	bl	8000a0c <fit_data>
  fit_data(TABLE_OUTLOOK, SET1_OVERCAST, YES);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2101      	movs	r1, #1
 80004fe:	2000      	movs	r0, #0
 8000500:	f000 fa84 	bl	8000a0c <fit_data>
  fit_data(TABLE_OUTLOOK, SET1_OVERCAST, YES);
 8000504:	2200      	movs	r2, #0
 8000506:	2101      	movs	r1, #1
 8000508:	2000      	movs	r0, #0
 800050a:	f000 fa7f 	bl	8000a0c <fit_data>

  fit_data(TABLE_OUTLOOK, SET1_RAINY, YES);
 800050e:	2200      	movs	r2, #0
 8000510:	2102      	movs	r1, #2
 8000512:	2000      	movs	r0, #0
 8000514:	f000 fa7a 	bl	8000a0c <fit_data>
  fit_data(TABLE_OUTLOOK, SET1_RAINY, YES);
 8000518:	2200      	movs	r2, #0
 800051a:	2102      	movs	r1, #2
 800051c:	2000      	movs	r0, #0
 800051e:	f000 fa75 	bl	8000a0c <fit_data>
  fit_data(TABLE_OUTLOOK, SET1_RAINY, YES);
 8000522:	2200      	movs	r2, #0
 8000524:	2102      	movs	r1, #2
 8000526:	2000      	movs	r0, #0
 8000528:	f000 fa70 	bl	8000a0c <fit_data>
  fit_data(TABLE_OUTLOOK, SET1_RAINY, NO);
 800052c:	2201      	movs	r2, #1
 800052e:	2102      	movs	r1, #2
 8000530:	2000      	movs	r0, #0
 8000532:	f000 fa6b 	bl	8000a0c <fit_data>
  fit_data(TABLE_OUTLOOK, SET1_RAINY, NO);
 8000536:	2201      	movs	r2, #1
 8000538:	2102      	movs	r1, #2
 800053a:	2000      	movs	r0, #0
 800053c:	f000 fa66 	bl	8000a0c <fit_data>

  /* training sample for table 2 */
  fit_data(TABLE_TEMP, SET2_HOT, YES);
 8000540:	2200      	movs	r2, #0
 8000542:	2100      	movs	r1, #0
 8000544:	2001      	movs	r0, #1
 8000546:	f000 fa61 	bl	8000a0c <fit_data>
  fit_data(TABLE_TEMP, SET2_HOT, YES);
 800054a:	2200      	movs	r2, #0
 800054c:	2100      	movs	r1, #0
 800054e:	2001      	movs	r0, #1
 8000550:	f000 fa5c 	bl	8000a0c <fit_data>
  fit_data(TABLE_TEMP, SET2_HOT, NO);
 8000554:	2201      	movs	r2, #1
 8000556:	2100      	movs	r1, #0
 8000558:	2001      	movs	r0, #1
 800055a:	f000 fa57 	bl	8000a0c <fit_data>
  fit_data(TABLE_TEMP, SET2_HOT, NO);
 800055e:	2201      	movs	r2, #1
 8000560:	2100      	movs	r1, #0
 8000562:	2001      	movs	r0, #1
 8000564:	f000 fa52 	bl	8000a0c <fit_data>

  fit_data(TABLE_TEMP, SET2_MILD, YES);
 8000568:	2200      	movs	r2, #0
 800056a:	2101      	movs	r1, #1
 800056c:	2001      	movs	r0, #1
 800056e:	f000 fa4d 	bl	8000a0c <fit_data>
  fit_data(TABLE_TEMP, SET2_MILD, YES);
 8000572:	2200      	movs	r2, #0
 8000574:	2101      	movs	r1, #1
 8000576:	2001      	movs	r0, #1
 8000578:	f000 fa48 	bl	8000a0c <fit_data>
  fit_data(TABLE_TEMP, SET2_MILD, YES);
 800057c:	2200      	movs	r2, #0
 800057e:	2101      	movs	r1, #1
 8000580:	2001      	movs	r0, #1
 8000582:	f000 fa43 	bl	8000a0c <fit_data>
  fit_data(TABLE_TEMP, SET2_MILD, YES);
 8000586:	2200      	movs	r2, #0
 8000588:	2101      	movs	r1, #1
 800058a:	2001      	movs	r0, #1
 800058c:	f000 fa3e 	bl	8000a0c <fit_data>
  fit_data(TABLE_TEMP, SET2_MILD, NO);
 8000590:	2201      	movs	r2, #1
 8000592:	2101      	movs	r1, #1
 8000594:	2001      	movs	r0, #1
 8000596:	f000 fa39 	bl	8000a0c <fit_data>
  fit_data(TABLE_TEMP, SET2_MILD, NO);
 800059a:	2201      	movs	r2, #1
 800059c:	2101      	movs	r1, #1
 800059e:	2001      	movs	r0, #1
 80005a0:	f000 fa34 	bl	8000a0c <fit_data>

  fit_data(TABLE_TEMP, SET2_COOL, YES);
 80005a4:	2200      	movs	r2, #0
 80005a6:	2102      	movs	r1, #2
 80005a8:	2001      	movs	r0, #1
 80005aa:	f000 fa2f 	bl	8000a0c <fit_data>
  fit_data(TABLE_TEMP, SET2_COOL, YES);
 80005ae:	2200      	movs	r2, #0
 80005b0:	2102      	movs	r1, #2
 80005b2:	2001      	movs	r0, #1
 80005b4:	f000 fa2a 	bl	8000a0c <fit_data>
  fit_data(TABLE_TEMP, SET2_COOL, YES);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2102      	movs	r1, #2
 80005bc:	2001      	movs	r0, #1
 80005be:	f000 fa25 	bl	8000a0c <fit_data>
  fit_data(TABLE_TEMP, SET2_COOL, NO);
 80005c2:	2201      	movs	r2, #1
 80005c4:	2102      	movs	r1, #2
 80005c6:	2001      	movs	r0, #1
 80005c8:	f000 fa20 	bl	8000a0c <fit_data>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	    /* Enable GPIOs clock */
	    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005cc:	4b40      	ldr	r3, [pc, #256]	; (80006d0 <main+0x244>)
 80005ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005d0:	4b3f      	ldr	r3, [pc, #252]	; (80006d0 <main+0x244>)
 80005d2:	2101      	movs	r1, #1
 80005d4:	430a      	orrs	r2, r1
 80005d6:	62da      	str	r2, [r3, #44]	; 0x2c
 80005d8:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <main+0x244>)
 80005da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005dc:	2201      	movs	r2, #1
 80005de:	4013      	ands	r3, r2
 80005e0:	60fb      	str	r3, [r7, #12]
 80005e2:	68fb      	ldr	r3, [r7, #12]
	    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e4:	4b3a      	ldr	r3, [pc, #232]	; (80006d0 <main+0x244>)
 80005e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005e8:	4b39      	ldr	r3, [pc, #228]	; (80006d0 <main+0x244>)
 80005ea:	2102      	movs	r1, #2
 80005ec:	430a      	orrs	r2, r1
 80005ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80005f0:	4b37      	ldr	r3, [pc, #220]	; (80006d0 <main+0x244>)
 80005f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005f4:	2202      	movs	r2, #2
 80005f6:	4013      	ands	r3, r2
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]
	    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fc:	4b34      	ldr	r3, [pc, #208]	; (80006d0 <main+0x244>)
 80005fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000600:	4b33      	ldr	r3, [pc, #204]	; (80006d0 <main+0x244>)
 8000602:	2104      	movs	r1, #4
 8000604:	430a      	orrs	r2, r1
 8000606:	62da      	str	r2, [r3, #44]	; 0x2c
 8000608:	4b31      	ldr	r3, [pc, #196]	; (80006d0 <main+0x244>)
 800060a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800060c:	2204      	movs	r2, #4
 800060e:	4013      	ands	r3, r2
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	687b      	ldr	r3, [r7, #4]
	    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000614:	4b2e      	ldr	r3, [pc, #184]	; (80006d0 <main+0x244>)
 8000616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000618:	4b2d      	ldr	r3, [pc, #180]	; (80006d0 <main+0x244>)
 800061a:	2180      	movs	r1, #128	; 0x80
 800061c:	430a      	orrs	r2, r1
 800061e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000620:	4b2b      	ldr	r3, [pc, #172]	; (80006d0 <main+0x244>)
 8000622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000624:	2280      	movs	r2, #128	; 0x80
 8000626:	4013      	ands	r3, r2
 8000628:	603b      	str	r3, [r7, #0]
 800062a:	683b      	ldr	r3, [r7, #0]
	    /*   except GPIOC to keep user button interrupt enabled                     */
	    /* Note: Debug using ST-Link is not possible during the execution of this   */
	    /*       example because communication between ST-link and the device       */
	    /*       under test is done through UART. All GPIO pins are disabled (set   */
	    /*       to analog input mode) including  UART I/O pins.                    */
	    GPIO_InitStructure.Pin = GPIO_PIN_All;
 800062c:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <main+0x248>)
 800062e:	4a2a      	ldr	r2, [pc, #168]	; (80006d8 <main+0x24c>)
 8000630:	601a      	str	r2, [r3, #0]
	    GPIO_InitStructure.Mode = GPIO_MODE_ANALOG;
 8000632:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <main+0x248>)
 8000634:	2203      	movs	r2, #3
 8000636:	605a      	str	r2, [r3, #4]
	    GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000638:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <main+0x248>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]

	    HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800063e:	4a25      	ldr	r2, [pc, #148]	; (80006d4 <main+0x248>)
 8000640:	23a0      	movs	r3, #160	; 0xa0
 8000642:	05db      	lsls	r3, r3, #23
 8000644:	0011      	movs	r1, r2
 8000646:	0018      	movs	r0, r3
 8000648:	f000 fc02 	bl	8000e50 <HAL_GPIO_Init>
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800064c:	4b21      	ldr	r3, [pc, #132]	; (80006d4 <main+0x248>)
 800064e:	4a23      	ldr	r2, [pc, #140]	; (80006dc <main+0x250>)
 8000650:	0019      	movs	r1, r3
 8000652:	0010      	movs	r0, r2
 8000654:	f000 fbfc 	bl	8000e50 <HAL_GPIO_Init>
	    HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000658:	4b1e      	ldr	r3, [pc, #120]	; (80006d4 <main+0x248>)
 800065a:	4a21      	ldr	r2, [pc, #132]	; (80006e0 <main+0x254>)
 800065c:	0019      	movs	r1, r3
 800065e:	0010      	movs	r0, r2
 8000660:	f000 fbf6 	bl	8000e50 <HAL_GPIO_Init>
	    HAL_GPIO_Init(GPIOH, &GPIO_InitStructure);
 8000664:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <main+0x248>)
 8000666:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <main+0x258>)
 8000668:	0019      	movs	r1, r3
 800066a:	0010      	movs	r0, r2
 800066c:	f000 fbf0 	bl	8000e50 <HAL_GPIO_Init>

	    /* Disable GPIOs clock */
	    __HAL_RCC_GPIOA_CLK_DISABLE();
 8000670:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <main+0x244>)
 8000672:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000674:	4b16      	ldr	r3, [pc, #88]	; (80006d0 <main+0x244>)
 8000676:	2101      	movs	r1, #1
 8000678:	438a      	bics	r2, r1
 800067a:	62da      	str	r2, [r3, #44]	; 0x2c
	    __HAL_RCC_GPIOB_CLK_DISABLE();
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <main+0x244>)
 800067e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000680:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <main+0x244>)
 8000682:	2102      	movs	r1, #2
 8000684:	438a      	bics	r2, r1
 8000686:	62da      	str	r2, [r3, #44]	; 0x2c
	    __HAL_RCC_GPIOC_CLK_DISABLE();
 8000688:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <main+0x244>)
 800068a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800068c:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <main+0x244>)
 800068e:	2104      	movs	r1, #4
 8000690:	438a      	bics	r2, r1
 8000692:	62da      	str	r2, [r3, #44]	; 0x2c
	    __HAL_RCC_GPIOH_CLK_DISABLE();
 8000694:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <main+0x244>)
 8000696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000698:	4b0d      	ldr	r3, [pc, #52]	; (80006d0 <main+0x244>)
 800069a:	2180      	movs	r1, #128	; 0x80
 800069c:	438a      	bics	r2, r1
 800069e:	62da      	str	r2, [r3, #44]	; 0x2c

	    /* Disable all used wake up source */
	    HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <main+0x25c>)
 80006a2:	0018      	movs	r0, r3
 80006a4:	f001 ff64 	bl	8002570 <HAL_RTCEx_DeactivateWakeUpTimer>

	    __HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 80006a8:	4b10      	ldr	r3, [pc, #64]	; (80006ec <main+0x260>)
 80006aa:	681a      	ldr	r2, [r3, #0]
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <main+0x260>)
 80006ae:	2104      	movs	r1, #4
 80006b0:	430a      	orrs	r2, r1
 80006b2:	601a      	str	r2, [r3, #0]
	        To configure the wake up timer to 60s the WakeUpCounter is set to 0xFFFF:
	        Wake up Time Base = 16 /(~32.000KHz) = ~0.5 ms
	        Wake up Time = 0.5 ms  * WakeUpCounter
	        Therefore, with wake-up counter =  0xFFFF  = 65,535
	           Wake up Time =  0,5 ms *  65,535 = 32,7675 s ~ 33 sec. */
	   HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0x0FFFF, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 80006b4:	4908      	ldr	r1, [pc, #32]	; (80006d8 <main+0x24c>)
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <main+0x25c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	0018      	movs	r0, r3
 80006bc:	f001 fe92 	bl	80023e4 <HAL_RTCEx_SetWakeUpTimer_IT>


	   /* Enter stop 0 mode */
	   HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80006c0:	2101      	movs	r1, #1
 80006c2:	2001      	movs	r0, #1
 80006c4:	f000 fd3a 	bl	800113c <HAL_PWR_EnterSTOPMode>

	   /* ... Stop 0 mode ... */

	   /* Configure system clock after wake-up from stop: enable HSE, PLL and select
	   PLL as system clock source (HSE and PLL are disabled in stop mode) */
	   SYSCLKConfig_STOP();
 80006c8:	f000 f950 	bl	800096c <SYSCLKConfig_STOP>
	    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006cc:	e77e      	b.n	80005cc <main+0x140>
 80006ce:	46c0      	nop			; (mov r8, r8)
 80006d0:	40021000 	.word	0x40021000
 80006d4:	2000008c 	.word	0x2000008c
 80006d8:	0000ffff 	.word	0x0000ffff
 80006dc:	50000400 	.word	0x50000400
 80006e0:	50000800 	.word	0x50000800
 80006e4:	50001c00 	.word	0x50001c00
 80006e8:	20000068 	.word	0x20000068
 80006ec:	40007000 	.word	0x40007000

080006f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f0:	b590      	push	{r4, r7, lr}
 80006f2:	b09d      	sub	sp, #116	; 0x74
 80006f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	2438      	movs	r4, #56	; 0x38
 80006f8:	193b      	adds	r3, r7, r4
 80006fa:	0018      	movs	r0, r3
 80006fc:	2338      	movs	r3, #56	; 0x38
 80006fe:	001a      	movs	r2, r3
 8000700:	2100      	movs	r1, #0
 8000702:	f001 ffbb 	bl	800267c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000706:	2324      	movs	r3, #36	; 0x24
 8000708:	18fb      	adds	r3, r7, r3
 800070a:	0018      	movs	r0, r3
 800070c:	2314      	movs	r3, #20
 800070e:	001a      	movs	r2, r3
 8000710:	2100      	movs	r1, #0
 8000712:	f001 ffb3 	bl	800267c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000716:	003b      	movs	r3, r7
 8000718:	0018      	movs	r0, r3
 800071a:	2324      	movs	r3, #36	; 0x24
 800071c:	001a      	movs	r2, r3
 800071e:	2100      	movs	r1, #0
 8000720:	f001 ffac 	bl	800267c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000724:	4b2b      	ldr	r3, [pc, #172]	; (80007d4 <SystemClock_Config+0xe4>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a2b      	ldr	r2, [pc, #172]	; (80007d8 <SystemClock_Config+0xe8>)
 800072a:	401a      	ands	r2, r3
 800072c:	4b29      	ldr	r3, [pc, #164]	; (80007d4 <SystemClock_Config+0xe4>)
 800072e:	2180      	movs	r1, #128	; 0x80
 8000730:	0109      	lsls	r1, r1, #4
 8000732:	430a      	orrs	r2, r1
 8000734:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000736:	0021      	movs	r1, r4
 8000738:	187b      	adds	r3, r7, r1
 800073a:	220a      	movs	r2, #10
 800073c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800073e:	187b      	adds	r3, r7, r1
 8000740:	2201      	movs	r2, #1
 8000742:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000744:	187b      	adds	r3, r7, r1
 8000746:	2210      	movs	r2, #16
 8000748:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800074a:	187b      	adds	r3, r7, r1
 800074c:	2201      	movs	r2, #1
 800074e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000750:	187b      	adds	r3, r7, r1
 8000752:	2202      	movs	r2, #2
 8000754:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000756:	187b      	adds	r3, r7, r1
 8000758:	2200      	movs	r2, #0
 800075a:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_3;
 800075c:	187b      	adds	r3, r7, r1
 800075e:	2200      	movs	r2, #0
 8000760:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000762:	187b      	adds	r3, r7, r1
 8000764:	2280      	movs	r2, #128	; 0x80
 8000766:	03d2      	lsls	r2, r2, #15
 8000768:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076a:	187b      	adds	r3, r7, r1
 800076c:	0018      	movs	r0, r3
 800076e:	f000 fd41 	bl	80011f4 <HAL_RCC_OscConfig>
 8000772:	1e03      	subs	r3, r0, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000776:	f000 f9a7 	bl	8000ac8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077a:	2124      	movs	r1, #36	; 0x24
 800077c:	187b      	adds	r3, r7, r1
 800077e:	220f      	movs	r2, #15
 8000780:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000782:	187b      	adds	r3, r7, r1
 8000784:	2203      	movs	r2, #3
 8000786:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000788:	187b      	adds	r3, r7, r1
 800078a:	2200      	movs	r2, #0
 800078c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800078e:	187b      	adds	r3, r7, r1
 8000790:	2200      	movs	r2, #0
 8000792:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000794:	187b      	adds	r3, r7, r1
 8000796:	2200      	movs	r2, #0
 8000798:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800079a:	187b      	adds	r3, r7, r1
 800079c:	2101      	movs	r1, #1
 800079e:	0018      	movs	r0, r3
 80007a0:	f001 f8f0 	bl	8001984 <HAL_RCC_ClockConfig>
 80007a4:	1e03      	subs	r3, r0, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80007a8:	f000 f98e 	bl	8000ac8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80007ac:	003b      	movs	r3, r7
 80007ae:	2220      	movs	r2, #32
 80007b0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80007b2:	003b      	movs	r3, r7
 80007b4:	2280      	movs	r2, #128	; 0x80
 80007b6:	0292      	lsls	r2, r2, #10
 80007b8:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ba:	003b      	movs	r3, r7
 80007bc:	0018      	movs	r0, r3
 80007be:	f001 fbbd 	bl	8001f3c <HAL_RCCEx_PeriphCLKConfig>
 80007c2:	1e03      	subs	r3, r0, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0xda>
  {
    Error_Handler();
 80007c6:	f000 f97f 	bl	8000ac8 <Error_Handler>
  }
}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	46bd      	mov	sp, r7
 80007ce:	b01d      	add	sp, #116	; 0x74
 80007d0:	bd90      	pop	{r4, r7, pc}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	40007000 	.word	0x40007000
 80007d8:	ffffe7ff 	.word	0xffffe7ff

080007dc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_RTC_Init+0x4c>)
 80007e2:	4a12      	ldr	r2, [pc, #72]	; (800082c <MX_RTC_Init+0x50>)
 80007e4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <MX_RTC_Init+0x4c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127; // should  investigate these
 80007ec:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_RTC_Init+0x4c>)
 80007ee:	227f      	movs	r2, #127	; 0x7f
 80007f0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;  // should investigate these
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <MX_RTC_Init+0x4c>)
 80007f4:	22ff      	movs	r2, #255	; 0xff
 80007f6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007f8:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_RTC_Init+0x4c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80007fe:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <MX_RTC_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_RTC_Init+0x4c>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800080a:	4b07      	ldr	r3, [pc, #28]	; (8000828 <MX_RTC_Init+0x4c>)
 800080c:	2200      	movs	r2, #0
 800080e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000810:	4b05      	ldr	r3, [pc, #20]	; (8000828 <MX_RTC_Init+0x4c>)
 8000812:	0018      	movs	r0, r3
 8000814:	f001 fcf6 	bl	8002204 <HAL_RTC_Init>
 8000818:	1e03      	subs	r3, r0, #0
 800081a:	d001      	beq.n	8000820 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 800081c:	f000 f954 	bl	8000ac8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000820:	46c0      	nop			; (mov r8, r8)
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	20000068 	.word	0x20000068
 800082c:	40002800 	.word	0x40002800

08000830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000830:	b590      	push	{r4, r7, lr}
 8000832:	b08b      	sub	sp, #44	; 0x2c
 8000834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	2414      	movs	r4, #20
 8000838:	193b      	adds	r3, r7, r4
 800083a:	0018      	movs	r0, r3
 800083c:	2314      	movs	r3, #20
 800083e:	001a      	movs	r2, r3
 8000840:	2100      	movs	r1, #0
 8000842:	f001 ff1b 	bl	800267c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000846:	4b39      	ldr	r3, [pc, #228]	; (800092c <MX_GPIO_Init+0xfc>)
 8000848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800084a:	4b38      	ldr	r3, [pc, #224]	; (800092c <MX_GPIO_Init+0xfc>)
 800084c:	2104      	movs	r1, #4
 800084e:	430a      	orrs	r2, r1
 8000850:	62da      	str	r2, [r3, #44]	; 0x2c
 8000852:	4b36      	ldr	r3, [pc, #216]	; (800092c <MX_GPIO_Init+0xfc>)
 8000854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000856:	2204      	movs	r2, #4
 8000858:	4013      	ands	r3, r2
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085e:	4b33      	ldr	r3, [pc, #204]	; (800092c <MX_GPIO_Init+0xfc>)
 8000860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000862:	4b32      	ldr	r3, [pc, #200]	; (800092c <MX_GPIO_Init+0xfc>)
 8000864:	2180      	movs	r1, #128	; 0x80
 8000866:	430a      	orrs	r2, r1
 8000868:	62da      	str	r2, [r3, #44]	; 0x2c
 800086a:	4b30      	ldr	r3, [pc, #192]	; (800092c <MX_GPIO_Init+0xfc>)
 800086c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800086e:	2280      	movs	r2, #128	; 0x80
 8000870:	4013      	ands	r3, r2
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	4b2d      	ldr	r3, [pc, #180]	; (800092c <MX_GPIO_Init+0xfc>)
 8000878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800087a:	4b2c      	ldr	r3, [pc, #176]	; (800092c <MX_GPIO_Init+0xfc>)
 800087c:	2101      	movs	r1, #1
 800087e:	430a      	orrs	r2, r1
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
 8000882:	4b2a      	ldr	r3, [pc, #168]	; (800092c <MX_GPIO_Init+0xfc>)
 8000884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000886:	2201      	movs	r2, #1
 8000888:	4013      	ands	r3, r2
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088e:	4b27      	ldr	r3, [pc, #156]	; (800092c <MX_GPIO_Init+0xfc>)
 8000890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000892:	4b26      	ldr	r3, [pc, #152]	; (800092c <MX_GPIO_Init+0xfc>)
 8000894:	2102      	movs	r1, #2
 8000896:	430a      	orrs	r2, r1
 8000898:	62da      	str	r2, [r3, #44]	; 0x2c
 800089a:	4b24      	ldr	r3, [pc, #144]	; (800092c <MX_GPIO_Init+0xfc>)
 800089c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800089e:	2202      	movs	r2, #2
 80008a0:	4013      	ands	r3, r2
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80008a6:	193b      	adds	r3, r7, r4
 80008a8:	22e0      	movs	r2, #224	; 0xe0
 80008aa:	0212      	lsls	r2, r2, #8
 80008ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008ae:	193b      	adds	r3, r7, r4
 80008b0:	2203      	movs	r2, #3
 80008b2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	193b      	adds	r3, r7, r4
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008ba:	193b      	adds	r3, r7, r4
 80008bc:	4a1c      	ldr	r2, [pc, #112]	; (8000930 <MX_GPIO_Init+0x100>)
 80008be:	0019      	movs	r1, r3
 80008c0:	0010      	movs	r0, r2
 80008c2:	f000 fac5 	bl	8000e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008c6:	193b      	adds	r3, r7, r4
 80008c8:	2203      	movs	r2, #3
 80008ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008cc:	193b      	adds	r3, r7, r4
 80008ce:	2203      	movs	r2, #3
 80008d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	193b      	adds	r3, r7, r4
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80008d8:	193b      	adds	r3, r7, r4
 80008da:	4a16      	ldr	r2, [pc, #88]	; (8000934 <MX_GPIO_Init+0x104>)
 80008dc:	0019      	movs	r1, r3
 80008de:	0010      	movs	r0, r2
 80008e0:	f000 fab6 	bl	8000e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA5 PA6 PA7
                           PA8 PA9 PA10 PA11
                           PA12 PA13 PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80008e4:	193b      	adds	r3, r7, r4
 80008e6:	4a14      	ldr	r2, [pc, #80]	; (8000938 <MX_GPIO_Init+0x108>)
 80008e8:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008ea:	193b      	adds	r3, r7, r4
 80008ec:	2203      	movs	r2, #3
 80008ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	193b      	adds	r3, r7, r4
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f6:	193a      	adds	r2, r7, r4
 80008f8:	23a0      	movs	r3, #160	; 0xa0
 80008fa:	05db      	lsls	r3, r3, #23
 80008fc:	0011      	movs	r1, r2
 80008fe:	0018      	movs	r0, r3
 8000900:	f000 faa6 	bl	8000e50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000904:	193b      	adds	r3, r7, r4
 8000906:	4a0c      	ldr	r2, [pc, #48]	; (8000938 <MX_GPIO_Init+0x108>)
 8000908:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800090a:	193b      	adds	r3, r7, r4
 800090c:	2203      	movs	r2, #3
 800090e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	193b      	adds	r3, r7, r4
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000916:	193b      	adds	r3, r7, r4
 8000918:	4a08      	ldr	r2, [pc, #32]	; (800093c <MX_GPIO_Init+0x10c>)
 800091a:	0019      	movs	r1, r3
 800091c:	0010      	movs	r0, r2
 800091e:	f000 fa97 	bl	8000e50 <HAL_GPIO_Init>

}
 8000922:	46c0      	nop			; (mov r8, r8)
 8000924:	46bd      	mov	sp, r7
 8000926:	b00b      	add	sp, #44	; 0x2c
 8000928:	bd90      	pop	{r4, r7, pc}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	40021000 	.word	0x40021000
 8000930:	50000800 	.word	0x50000800
 8000934:	50001c00 	.word	0x50001c00
 8000938:	0000ffff 	.word	0x0000ffff
 800093c:	50000400 	.word	0x50000400

08000940 <RTC_Config>:
  *         RTC Clocked by LSI (see HAL_RTC_MspInit)
  * @param  None
  * @retval None
  */
static void RTC_Config(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* Configure RTC */
  /* after MX_RTC_Init : this not done in the MX_RTC_Init*/

  /*##-2- Enable the RTC peripheral Clock ####################################*/
  /* Enable RTC Clock */
  __HAL_RCC_RTC_ENABLE();
 8000944:	4b08      	ldr	r3, [pc, #32]	; (8000968 <RTC_Config+0x28>)
 8000946:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000948:	4b07      	ldr	r3, [pc, #28]	; (8000968 <RTC_Config+0x28>)
 800094a:	2180      	movs	r1, #128	; 0x80
 800094c:	02c9      	lsls	r1, r1, #11
 800094e:	430a      	orrs	r2, r1
 8000950:	651a      	str	r2, [r3, #80]	; 0x50

  /*##-3- Configure the NVIC for RTC Alarm ###################################*/
  HAL_NVIC_SetPriority(RTC_IRQn, 0x0, 0);
 8000952:	2200      	movs	r2, #0
 8000954:	2100      	movs	r1, #0
 8000956:	2002      	movs	r0, #2
 8000958:	f000 fa48 	bl	8000dec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_IRQn);
 800095c:	2002      	movs	r0, #2
 800095e:	f000 fa5a 	bl	8000e16 <HAL_NVIC_EnableIRQ>
}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40021000 	.word	0x40021000

0800096c <SYSCLKConfig_STOP>:
  *         and select PLL as system clock source.
  * @param  None
  * @retval None
  */
static void SYSCLKConfig_STOP(void)
{
 800096c:	b590      	push	{r4, r7, lr}
 800096e:	b095      	sub	sp, #84	; 0x54
 8000970:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000972:	233c      	movs	r3, #60	; 0x3c
 8000974:	18fb      	adds	r3, r7, r3
 8000976:	0018      	movs	r0, r3
 8000978:	2314      	movs	r3, #20
 800097a:	001a      	movs	r2, r3
 800097c:	2100      	movs	r1, #0
 800097e:	f001 fe7d 	bl	800267c <memset>
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	0018      	movs	r0, r3
 8000986:	2338      	movs	r3, #56	; 0x38
 8000988:	001a      	movs	r2, r3
 800098a:	2100      	movs	r1, #0
 800098c:	f001 fe76 	bl	800267c <memset>
  uint32_t pFLatency = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	603b      	str	r3, [r7, #0]

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000994:	4b1c      	ldr	r3, [pc, #112]	; (8000a08 <SYSCLKConfig_STOP+0x9c>)
 8000996:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000998:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <SYSCLKConfig_STOP+0x9c>)
 800099a:	2180      	movs	r1, #128	; 0x80
 800099c:	0549      	lsls	r1, r1, #21
 800099e:	430a      	orrs	r2, r1
 80009a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Get the Oscillators configuration according to the internal RCC registers */
  HAL_RCC_GetOscConfig(&RCC_OscInitStruct);
 80009a2:	1d3b      	adds	r3, r7, #4
 80009a4:	0018      	movs	r0, r3
 80009a6:	f001 f9d7 	bl	8001d58 <HAL_RCC_GetOscConfig>

  /* After wake-up from stop reconfigure the system clock: Enable HSE and PLL */
  RCC_OscInitStruct.OscillatorType  = RCC_OSCILLATORTYPE_HSE;
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	2201      	movs	r2, #1
 80009ae:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState        = RCC_HSE_ON;
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	2280      	movs	r2, #128	; 0x80
 80009b4:	0252      	lsls	r2, r2, #9
 80009b6:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState    = RCC_PLL_ON;
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	2202      	movs	r2, #2
 80009bc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009be:	1d3b      	adds	r3, r7, #4
 80009c0:	0018      	movs	r0, r3
 80009c2:	f000 fc17 	bl	80011f4 <HAL_RCC_OscConfig>
 80009c6:	1e03      	subs	r3, r0, #0
 80009c8:	d001      	beq.n	80009ce <SYSCLKConfig_STOP+0x62>
  {
    Error_Handler();
 80009ca:	f000 f87d 	bl	8000ac8 <Error_Handler>
  }

  /* Get the Clocks configuration according to the internal RCC registers */
  HAL_RCC_GetClockConfig(&RCC_ClkInitStruct, &pFLatency);
 80009ce:	003a      	movs	r2, r7
 80009d0:	213c      	movs	r1, #60	; 0x3c
 80009d2:	000c      	movs	r4, r1
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	0011      	movs	r1, r2
 80009d8:	0018      	movs	r0, r3
 80009da:	f001 fa7d 	bl	8001ed8 <HAL_RCC_GetClockConfig>

  /* Select PLL as system clock source and keep HCLK, PCLK1 and PCLK2 clocks dividers as before */
  RCC_ClkInitStruct.ClockType     = RCC_CLOCKTYPE_SYSCLK;
 80009de:	0021      	movs	r1, r4
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	2201      	movs	r2, #1
 80009e4:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource  = RCC_SYSCLKSOURCE_PLLCLK;
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2203      	movs	r2, #3
 80009ea:	605a      	str	r2, [r3, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, pFLatency) != HAL_OK)
 80009ec:	683a      	ldr	r2, [r7, #0]
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	0011      	movs	r1, r2
 80009f2:	0018      	movs	r0, r3
 80009f4:	f000 ffc6 	bl	8001984 <HAL_RCC_ClockConfig>
 80009f8:	1e03      	subs	r3, r0, #0
 80009fa:	d001      	beq.n	8000a00 <SYSCLKConfig_STOP+0x94>
  {
    Error_Handler();
 80009fc:	f000 f864 	bl	8000ac8 <Error_Handler>
  }
}
 8000a00:	46c0      	nop			; (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	b015      	add	sp, #84	; 0x54
 8000a06:	bd90      	pop	{r4, r7, pc}
 8000a08:	40021000 	.word	0x40021000

08000a0c <fit_data>:
/*
 * training data set function
 *
 */
void fit_data(int table_type, int feature, int prediction)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b084      	sub	sp, #16
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
	if(table_type == TABLE_OUTLOOK)
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d120      	bne.n	8000a60 <fit_data+0x54>
	{

		OUTLOOK_TABLE[feature][prediction] = OUTLOOK_TABLE[feature][prediction] + 1;
 8000a1e:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <fit_data+0xa4>)
 8000a20:	68ba      	ldr	r2, [r7, #8]
 8000a22:	0051      	lsls	r1, r2, #1
 8000a24:	687a      	ldr	r2, [r7, #4]
 8000a26:	188a      	adds	r2, r1, r2
 8000a28:	0092      	lsls	r2, r2, #2
 8000a2a:	58d3      	ldr	r3, [r2, r3]
 8000a2c:	1c59      	adds	r1, r3, #1
 8000a2e:	4b20      	ldr	r3, [pc, #128]	; (8000ab0 <fit_data+0xa4>)
 8000a30:	68ba      	ldr	r2, [r7, #8]
 8000a32:	0050      	lsls	r0, r2, #1
 8000a34:	687a      	ldr	r2, [r7, #4]
 8000a36:	1882      	adds	r2, r0, r2
 8000a38:	0092      	lsls	r2, r2, #2
 8000a3a:	50d1      	str	r1, [r2, r3]
		/* yes no records for outlook table */
		if(prediction == YES)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d105      	bne.n	8000a4e <fit_data+0x42>
		{
			outlook_yes_records++;
 8000a42:	4b1c      	ldr	r3, [pc, #112]	; (8000ab4 <fit_data+0xa8>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	1c5a      	adds	r2, r3, #1
 8000a48:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <fit_data+0xa8>)
 8000a4a:	601a      	str	r2, [r3, #0]

	}else
	{
		/* selection table type is wrong*/
	}
}
 8000a4c:	e02b      	b.n	8000aa6 <fit_data+0x9a>
		}else if(prediction == NO)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d128      	bne.n	8000aa6 <fit_data+0x9a>
			outlook_no_records++;
 8000a54:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <fit_data+0xac>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	1c5a      	adds	r2, r3, #1
 8000a5a:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <fit_data+0xac>)
 8000a5c:	601a      	str	r2, [r3, #0]
}
 8000a5e:	e022      	b.n	8000aa6 <fit_data+0x9a>
	}else if(table_type == TABLE_TEMP)
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d11f      	bne.n	8000aa6 <fit_data+0x9a>
		TEMP_TABLE[feature][prediction] = TEMP_TABLE[feature][prediction] + 1;
 8000a66:	4b15      	ldr	r3, [pc, #84]	; (8000abc <fit_data+0xb0>)
 8000a68:	68ba      	ldr	r2, [r7, #8]
 8000a6a:	0051      	lsls	r1, r2, #1
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	188a      	adds	r2, r1, r2
 8000a70:	0092      	lsls	r2, r2, #2
 8000a72:	58d3      	ldr	r3, [r2, r3]
 8000a74:	1c59      	adds	r1, r3, #1
 8000a76:	4b11      	ldr	r3, [pc, #68]	; (8000abc <fit_data+0xb0>)
 8000a78:	68ba      	ldr	r2, [r7, #8]
 8000a7a:	0050      	lsls	r0, r2, #1
 8000a7c:	687a      	ldr	r2, [r7, #4]
 8000a7e:	1882      	adds	r2, r0, r2
 8000a80:	0092      	lsls	r2, r2, #2
 8000a82:	50d1      	str	r1, [r2, r3]
		if(prediction == YES)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d105      	bne.n	8000a96 <fit_data+0x8a>
			temp_yes_records++;
 8000a8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <fit_data+0xb4>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	1c5a      	adds	r2, r3, #1
 8000a90:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <fit_data+0xb4>)
 8000a92:	601a      	str	r2, [r3, #0]
}
 8000a94:	e007      	b.n	8000aa6 <fit_data+0x9a>
		}else if(prediction == NO)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2b01      	cmp	r3, #1
 8000a9a:	d104      	bne.n	8000aa6 <fit_data+0x9a>
			temp_no_records++;
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <fit_data+0xb8>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	1c5a      	adds	r2, r3, #1
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <fit_data+0xb8>)
 8000aa4:	601a      	str	r2, [r3, #0]
}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	b004      	add	sp, #16
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	46c0      	nop			; (mov r8, r8)
 8000ab0:	20000038 	.word	0x20000038
 8000ab4:	20000028 	.word	0x20000028
 8000ab8:	2000002c 	.word	0x2000002c
 8000abc:	20000050 	.word	0x20000050
 8000ac0:	20000030 	.word	0x20000030
 8000ac4:	20000034 	.word	0x20000034

08000ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000acc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ace:	e7fe      	b.n	8000ace <Error_Handler+0x6>

08000ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad4:	4b07      	ldr	r3, [pc, #28]	; (8000af4 <HAL_MspInit+0x24>)
 8000ad6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <HAL_MspInit+0x24>)
 8000ada:	2101      	movs	r1, #1
 8000adc:	430a      	orrs	r2, r1
 8000ade:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae0:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <HAL_MspInit+0x24>)
 8000ae2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ae4:	4b03      	ldr	r3, [pc, #12]	; (8000af4 <HAL_MspInit+0x24>)
 8000ae6:	2180      	movs	r1, #128	; 0x80
 8000ae8:	0549      	lsls	r1, r1, #21
 8000aea:	430a      	orrs	r2, r1
 8000aec:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40021000 	.word	0x40021000

08000af8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a06      	ldr	r2, [pc, #24]	; (8000b20 <HAL_RTC_MspInit+0x28>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d106      	bne.n	8000b18 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_RTC_MspInit+0x2c>)
 8000b0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000b0e:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <HAL_RTC_MspInit+0x2c>)
 8000b10:	2180      	movs	r1, #128	; 0x80
 8000b12:	02c9      	lsls	r1, r1, #11
 8000b14:	430a      	orrs	r2, r1
 8000b16:	651a      	str	r2, [r3, #80]	; 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000b18:	46c0      	nop			; (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	b002      	add	sp, #8
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40002800 	.word	0x40002800
 8000b24:	40021000 	.word	0x40021000

08000b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <NMI_Handler+0x4>

08000b2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b2e:	b580      	push	{r7, lr}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <HardFault_Handler+0x4>

08000b34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b38:	46c0      	nop			; (mov r8, r8)
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b4c:	f000 f886 	bl	8000c5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b50:	46c0      	nop			; (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}

08000b56 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b56:	b580      	push	{r7, lr}
 8000b58:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b5a:	46c0      	nop			; (mov r8, r8)
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000b60:	480d      	ldr	r0, [pc, #52]	; (8000b98 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b62:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b64:	480d      	ldr	r0, [pc, #52]	; (8000b9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b66:	490e      	ldr	r1, [pc, #56]	; (8000ba0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b68:	4a0e      	ldr	r2, [pc, #56]	; (8000ba4 <LoopForever+0xe>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b6c:	e002      	b.n	8000b74 <LoopCopyDataInit>

08000b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b72:	3304      	adds	r3, #4

08000b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b78:	d3f9      	bcc.n	8000b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ba8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b7c:	4c0b      	ldr	r4, [pc, #44]	; (8000bac <LoopForever+0x16>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b80:	e001      	b.n	8000b86 <LoopFillZerobss>

08000b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b84:	3204      	adds	r2, #4

08000b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b88:	d3fb      	bcc.n	8000b82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b8a:	f7ff ffe4 	bl	8000b56 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b8e:	f001 fd51 	bl	8002634 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b92:	f7ff fc7b 	bl	800048c <main>

08000b96 <LoopForever>:

LoopForever:
    b LoopForever
 8000b96:	e7fe      	b.n	8000b96 <LoopForever>
  ldr   r0, =_estack
 8000b98:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ba4:	080026d0 	.word	0x080026d0
  ldr r2, =_sbss
 8000ba8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bac:	200000a4 	.word	0x200000a4

08000bb0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bb0:	e7fe      	b.n	8000bb0 <ADC1_COMP_IRQHandler>
	...

08000bb4 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bba:	1dfb      	adds	r3, r7, #7
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000bc0:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <HAL_Init+0x3c>)
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	4b0a      	ldr	r3, [pc, #40]	; (8000bf0 <HAL_Init+0x3c>)
 8000bc6:	2140      	movs	r1, #64	; 0x40
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bcc:	2000      	movs	r0, #0
 8000bce:	f000 f811 	bl	8000bf4 <HAL_InitTick>
 8000bd2:	1e03      	subs	r3, r0, #0
 8000bd4:	d003      	beq.n	8000bde <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000bd6:	1dfb      	adds	r3, r7, #7
 8000bd8:	2201      	movs	r2, #1
 8000bda:	701a      	strb	r2, [r3, #0]
 8000bdc:	e001      	b.n	8000be2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bde:	f7ff ff77 	bl	8000ad0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000be2:	1dfb      	adds	r3, r7, #7
 8000be4:	781b      	ldrb	r3, [r3, #0]
}
 8000be6:	0018      	movs	r0, r3
 8000be8:	46bd      	mov	sp, r7
 8000bea:	b002      	add	sp, #8
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	40022000 	.word	0x40022000

08000bf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf4:	b590      	push	{r4, r7, lr}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bfc:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <HAL_InitTick+0x5c>)
 8000bfe:	681c      	ldr	r4, [r3, #0]
 8000c00:	4b14      	ldr	r3, [pc, #80]	; (8000c54 <HAL_InitTick+0x60>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	0019      	movs	r1, r3
 8000c06:	23fa      	movs	r3, #250	; 0xfa
 8000c08:	0098      	lsls	r0, r3, #2
 8000c0a:	f7ff fa7d 	bl	8000108 <__udivsi3>
 8000c0e:	0003      	movs	r3, r0
 8000c10:	0019      	movs	r1, r3
 8000c12:	0020      	movs	r0, r4
 8000c14:	f7ff fa78 	bl	8000108 <__udivsi3>
 8000c18:	0003      	movs	r3, r0
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f000 f90b 	bl	8000e36 <HAL_SYSTICK_Config>
 8000c20:	1e03      	subs	r3, r0, #0
 8000c22:	d001      	beq.n	8000c28 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000c24:	2301      	movs	r3, #1
 8000c26:	e00f      	b.n	8000c48 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2b03      	cmp	r3, #3
 8000c2c:	d80b      	bhi.n	8000c46 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c2e:	6879      	ldr	r1, [r7, #4]
 8000c30:	2301      	movs	r3, #1
 8000c32:	425b      	negs	r3, r3
 8000c34:	2200      	movs	r2, #0
 8000c36:	0018      	movs	r0, r3
 8000c38:	f000 f8d8 	bl	8000dec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_InitTick+0x64>)
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c42:	2300      	movs	r3, #0
 8000c44:	e000      	b.n	8000c48 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
}
 8000c48:	0018      	movs	r0, r3
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	b003      	add	sp, #12
 8000c4e:	bd90      	pop	{r4, r7, pc}
 8000c50:	20000000 	.word	0x20000000
 8000c54:	20000008 	.word	0x20000008
 8000c58:	20000004 	.word	0x20000004

08000c5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <HAL_IncTick+0x1c>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	001a      	movs	r2, r3
 8000c66:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <HAL_IncTick+0x20>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	18d2      	adds	r2, r2, r3
 8000c6c:	4b03      	ldr	r3, [pc, #12]	; (8000c7c <HAL_IncTick+0x20>)
 8000c6e:	601a      	str	r2, [r3, #0]
}
 8000c70:	46c0      	nop			; (mov r8, r8)
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	20000008 	.word	0x20000008
 8000c7c:	200000a0 	.word	0x200000a0

08000c80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  return uwTick;
 8000c84:	4b02      	ldr	r3, [pc, #8]	; (8000c90 <HAL_GetTick+0x10>)
 8000c86:	681b      	ldr	r3, [r3, #0]
}
 8000c88:	0018      	movs	r0, r3
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	200000a0 	.word	0x200000a0

08000c94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	0002      	movs	r2, r0
 8000c9c:	1dfb      	adds	r3, r7, #7
 8000c9e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ca0:	1dfb      	adds	r3, r7, #7
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b7f      	cmp	r3, #127	; 0x7f
 8000ca6:	d809      	bhi.n	8000cbc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ca8:	1dfb      	adds	r3, r7, #7
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	001a      	movs	r2, r3
 8000cae:	231f      	movs	r3, #31
 8000cb0:	401a      	ands	r2, r3
 8000cb2:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <__NVIC_EnableIRQ+0x30>)
 8000cb4:	2101      	movs	r1, #1
 8000cb6:	4091      	lsls	r1, r2
 8000cb8:	000a      	movs	r2, r1
 8000cba:	601a      	str	r2, [r3, #0]
  }
}
 8000cbc:	46c0      	nop			; (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	b002      	add	sp, #8
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	e000e100 	.word	0xe000e100

08000cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc8:	b590      	push	{r4, r7, lr}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	0002      	movs	r2, r0
 8000cd0:	6039      	str	r1, [r7, #0]
 8000cd2:	1dfb      	adds	r3, r7, #7
 8000cd4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cd6:	1dfb      	adds	r3, r7, #7
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	2b7f      	cmp	r3, #127	; 0x7f
 8000cdc:	d828      	bhi.n	8000d30 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cde:	4a2f      	ldr	r2, [pc, #188]	; (8000d9c <__NVIC_SetPriority+0xd4>)
 8000ce0:	1dfb      	adds	r3, r7, #7
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	b25b      	sxtb	r3, r3
 8000ce6:	089b      	lsrs	r3, r3, #2
 8000ce8:	33c0      	adds	r3, #192	; 0xc0
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	589b      	ldr	r3, [r3, r2]
 8000cee:	1dfa      	adds	r2, r7, #7
 8000cf0:	7812      	ldrb	r2, [r2, #0]
 8000cf2:	0011      	movs	r1, r2
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	400a      	ands	r2, r1
 8000cf8:	00d2      	lsls	r2, r2, #3
 8000cfa:	21ff      	movs	r1, #255	; 0xff
 8000cfc:	4091      	lsls	r1, r2
 8000cfe:	000a      	movs	r2, r1
 8000d00:	43d2      	mvns	r2, r2
 8000d02:	401a      	ands	r2, r3
 8000d04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	019b      	lsls	r3, r3, #6
 8000d0a:	22ff      	movs	r2, #255	; 0xff
 8000d0c:	401a      	ands	r2, r3
 8000d0e:	1dfb      	adds	r3, r7, #7
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	0018      	movs	r0, r3
 8000d14:	2303      	movs	r3, #3
 8000d16:	4003      	ands	r3, r0
 8000d18:	00db      	lsls	r3, r3, #3
 8000d1a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d1c:	481f      	ldr	r0, [pc, #124]	; (8000d9c <__NVIC_SetPriority+0xd4>)
 8000d1e:	1dfb      	adds	r3, r7, #7
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	b25b      	sxtb	r3, r3
 8000d24:	089b      	lsrs	r3, r3, #2
 8000d26:	430a      	orrs	r2, r1
 8000d28:	33c0      	adds	r3, #192	; 0xc0
 8000d2a:	009b      	lsls	r3, r3, #2
 8000d2c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d2e:	e031      	b.n	8000d94 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d30:	4a1b      	ldr	r2, [pc, #108]	; (8000da0 <__NVIC_SetPriority+0xd8>)
 8000d32:	1dfb      	adds	r3, r7, #7
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	0019      	movs	r1, r3
 8000d38:	230f      	movs	r3, #15
 8000d3a:	400b      	ands	r3, r1
 8000d3c:	3b08      	subs	r3, #8
 8000d3e:	089b      	lsrs	r3, r3, #2
 8000d40:	3306      	adds	r3, #6
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	18d3      	adds	r3, r2, r3
 8000d46:	3304      	adds	r3, #4
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	1dfa      	adds	r2, r7, #7
 8000d4c:	7812      	ldrb	r2, [r2, #0]
 8000d4e:	0011      	movs	r1, r2
 8000d50:	2203      	movs	r2, #3
 8000d52:	400a      	ands	r2, r1
 8000d54:	00d2      	lsls	r2, r2, #3
 8000d56:	21ff      	movs	r1, #255	; 0xff
 8000d58:	4091      	lsls	r1, r2
 8000d5a:	000a      	movs	r2, r1
 8000d5c:	43d2      	mvns	r2, r2
 8000d5e:	401a      	ands	r2, r3
 8000d60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	019b      	lsls	r3, r3, #6
 8000d66:	22ff      	movs	r2, #255	; 0xff
 8000d68:	401a      	ands	r2, r3
 8000d6a:	1dfb      	adds	r3, r7, #7
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	0018      	movs	r0, r3
 8000d70:	2303      	movs	r3, #3
 8000d72:	4003      	ands	r3, r0
 8000d74:	00db      	lsls	r3, r3, #3
 8000d76:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d78:	4809      	ldr	r0, [pc, #36]	; (8000da0 <__NVIC_SetPriority+0xd8>)
 8000d7a:	1dfb      	adds	r3, r7, #7
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	001c      	movs	r4, r3
 8000d80:	230f      	movs	r3, #15
 8000d82:	4023      	ands	r3, r4
 8000d84:	3b08      	subs	r3, #8
 8000d86:	089b      	lsrs	r3, r3, #2
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	3306      	adds	r3, #6
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	18c3      	adds	r3, r0, r3
 8000d90:	3304      	adds	r3, #4
 8000d92:	601a      	str	r2, [r3, #0]
}
 8000d94:	46c0      	nop			; (mov r8, r8)
 8000d96:	46bd      	mov	sp, r7
 8000d98:	b003      	add	sp, #12
 8000d9a:	bd90      	pop	{r4, r7, pc}
 8000d9c:	e000e100 	.word	0xe000e100
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3b01      	subs	r3, #1
 8000db0:	4a0c      	ldr	r2, [pc, #48]	; (8000de4 <SysTick_Config+0x40>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d901      	bls.n	8000dba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000db6:	2301      	movs	r3, #1
 8000db8:	e010      	b.n	8000ddc <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dba:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <SysTick_Config+0x44>)
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	3a01      	subs	r2, #1
 8000dc0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	425b      	negs	r3, r3
 8000dc6:	2103      	movs	r1, #3
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f7ff ff7d 	bl	8000cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dce:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <SysTick_Config+0x44>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dd4:	4b04      	ldr	r3, [pc, #16]	; (8000de8 <SysTick_Config+0x44>)
 8000dd6:	2207      	movs	r2, #7
 8000dd8:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dda:	2300      	movs	r3, #0
}
 8000ddc:	0018      	movs	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	b002      	add	sp, #8
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	00ffffff 	.word	0x00ffffff
 8000de8:	e000e010 	.word	0xe000e010

08000dec <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60b9      	str	r1, [r7, #8]
 8000df4:	607a      	str	r2, [r7, #4]
 8000df6:	210f      	movs	r1, #15
 8000df8:	187b      	adds	r3, r7, r1
 8000dfa:	1c02      	adds	r2, r0, #0
 8000dfc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000dfe:	68ba      	ldr	r2, [r7, #8]
 8000e00:	187b      	adds	r3, r7, r1
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	b25b      	sxtb	r3, r3
 8000e06:	0011      	movs	r1, r2
 8000e08:	0018      	movs	r0, r3
 8000e0a:	f7ff ff5d 	bl	8000cc8 <__NVIC_SetPriority>
}
 8000e0e:	46c0      	nop			; (mov r8, r8)
 8000e10:	46bd      	mov	sp, r7
 8000e12:	b004      	add	sp, #16
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	0002      	movs	r2, r0
 8000e1e:	1dfb      	adds	r3, r7, #7
 8000e20:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e22:	1dfb      	adds	r3, r7, #7
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	b25b      	sxtb	r3, r3
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f7ff ff33 	bl	8000c94 <__NVIC_EnableIRQ>
}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	46bd      	mov	sp, r7
 8000e32:	b002      	add	sp, #8
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b082      	sub	sp, #8
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	0018      	movs	r0, r3
 8000e42:	f7ff ffaf 	bl	8000da4 <SysTick_Config>
 8000e46:	0003      	movs	r3, r0
}
 8000e48:	0018      	movs	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	b002      	add	sp, #8
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e66:	e14f      	b.n	8001108 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	697a      	ldr	r2, [r7, #20]
 8000e70:	4091      	lsls	r1, r2
 8000e72:	000a      	movs	r2, r1
 8000e74:	4013      	ands	r3, r2
 8000e76:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d100      	bne.n	8000e80 <HAL_GPIO_Init+0x30>
 8000e7e:	e140      	b.n	8001102 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	2b01      	cmp	r3, #1
 8000e86:	d00b      	beq.n	8000ea0 <HAL_GPIO_Init+0x50>
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d007      	beq.n	8000ea0 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e94:	2b11      	cmp	r3, #17
 8000e96:	d003      	beq.n	8000ea0 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	2b12      	cmp	r3, #18
 8000e9e:	d130      	bne.n	8000f02 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000ea6:	697b      	ldr	r3, [r7, #20]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	2203      	movs	r2, #3
 8000eac:	409a      	lsls	r2, r3
 8000eae:	0013      	movs	r3, r2
 8000eb0:	43da      	mvns	r2, r3
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	68da      	ldr	r2, [r3, #12]
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	409a      	lsls	r2, r3
 8000ec2:	0013      	movs	r3, r2
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	409a      	lsls	r2, r3
 8000edc:	0013      	movs	r3, r2
 8000ede:	43da      	mvns	r2, r3
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	091b      	lsrs	r3, r3, #4
 8000eec:	2201      	movs	r2, #1
 8000eee:	401a      	ands	r2, r3
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	409a      	lsls	r2, r3
 8000ef4:	0013      	movs	r3, r2
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	409a      	lsls	r2, r3
 8000f10:	0013      	movs	r3, r2
 8000f12:	43da      	mvns	r2, r3
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	4013      	ands	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	689a      	ldr	r2, [r3, #8]
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	409a      	lsls	r2, r3
 8000f24:	0013      	movs	r3, r2
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d003      	beq.n	8000f42 <HAL_GPIO_Init+0xf2>
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	2b12      	cmp	r3, #18
 8000f40:	d123      	bne.n	8000f8a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	08da      	lsrs	r2, r3, #3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3208      	adds	r2, #8
 8000f4a:	0092      	lsls	r2, r2, #2
 8000f4c:	58d3      	ldr	r3, [r2, r3]
 8000f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	2207      	movs	r2, #7
 8000f54:	4013      	ands	r3, r2
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	220f      	movs	r2, #15
 8000f5a:	409a      	lsls	r2, r3
 8000f5c:	0013      	movs	r3, r2
 8000f5e:	43da      	mvns	r2, r3
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	4013      	ands	r3, r2
 8000f64:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	691a      	ldr	r2, [r3, #16]
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	2107      	movs	r1, #7
 8000f6e:	400b      	ands	r3, r1
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	409a      	lsls	r2, r3
 8000f74:	0013      	movs	r3, r2
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	08da      	lsrs	r2, r3, #3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	3208      	adds	r2, #8
 8000f84:	0092      	lsls	r2, r2, #2
 8000f86:	6939      	ldr	r1, [r7, #16]
 8000f88:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	005b      	lsls	r3, r3, #1
 8000f94:	2203      	movs	r2, #3
 8000f96:	409a      	lsls	r2, r3
 8000f98:	0013      	movs	r3, r2
 8000f9a:	43da      	mvns	r2, r3
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	401a      	ands	r2, r3
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	005b      	lsls	r3, r3, #1
 8000fae:	409a      	lsls	r2, r3
 8000fb0:	0013      	movs	r3, r2
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685a      	ldr	r2, [r3, #4]
 8000fc2:	2380      	movs	r3, #128	; 0x80
 8000fc4:	055b      	lsls	r3, r3, #21
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	d100      	bne.n	8000fcc <HAL_GPIO_Init+0x17c>
 8000fca:	e09a      	b.n	8001102 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fcc:	4b54      	ldr	r3, [pc, #336]	; (8001120 <HAL_GPIO_Init+0x2d0>)
 8000fce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000fd0:	4b53      	ldr	r3, [pc, #332]	; (8001120 <HAL_GPIO_Init+0x2d0>)
 8000fd2:	2101      	movs	r1, #1
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fd8:	4a52      	ldr	r2, [pc, #328]	; (8001124 <HAL_GPIO_Init+0x2d4>)
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	089b      	lsrs	r3, r3, #2
 8000fde:	3302      	adds	r3, #2
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	589b      	ldr	r3, [r3, r2]
 8000fe4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	2203      	movs	r2, #3
 8000fea:	4013      	ands	r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	220f      	movs	r2, #15
 8000ff0:	409a      	lsls	r2, r3
 8000ff2:	0013      	movs	r3, r2
 8000ff4:	43da      	mvns	r2, r3
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	23a0      	movs	r3, #160	; 0xa0
 8001000:	05db      	lsls	r3, r3, #23
 8001002:	429a      	cmp	r2, r3
 8001004:	d019      	beq.n	800103a <HAL_GPIO_Init+0x1ea>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a47      	ldr	r2, [pc, #284]	; (8001128 <HAL_GPIO_Init+0x2d8>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d013      	beq.n	8001036 <HAL_GPIO_Init+0x1e6>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a46      	ldr	r2, [pc, #280]	; (800112c <HAL_GPIO_Init+0x2dc>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d00d      	beq.n	8001032 <HAL_GPIO_Init+0x1e2>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a45      	ldr	r2, [pc, #276]	; (8001130 <HAL_GPIO_Init+0x2e0>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d007      	beq.n	800102e <HAL_GPIO_Init+0x1de>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a44      	ldr	r2, [pc, #272]	; (8001134 <HAL_GPIO_Init+0x2e4>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d101      	bne.n	800102a <HAL_GPIO_Init+0x1da>
 8001026:	2305      	movs	r3, #5
 8001028:	e008      	b.n	800103c <HAL_GPIO_Init+0x1ec>
 800102a:	2306      	movs	r3, #6
 800102c:	e006      	b.n	800103c <HAL_GPIO_Init+0x1ec>
 800102e:	2303      	movs	r3, #3
 8001030:	e004      	b.n	800103c <HAL_GPIO_Init+0x1ec>
 8001032:	2302      	movs	r3, #2
 8001034:	e002      	b.n	800103c <HAL_GPIO_Init+0x1ec>
 8001036:	2301      	movs	r3, #1
 8001038:	e000      	b.n	800103c <HAL_GPIO_Init+0x1ec>
 800103a:	2300      	movs	r3, #0
 800103c:	697a      	ldr	r2, [r7, #20]
 800103e:	2103      	movs	r1, #3
 8001040:	400a      	ands	r2, r1
 8001042:	0092      	lsls	r2, r2, #2
 8001044:	4093      	lsls	r3, r2
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4313      	orrs	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800104c:	4935      	ldr	r1, [pc, #212]	; (8001124 <HAL_GPIO_Init+0x2d4>)
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	089b      	lsrs	r3, r3, #2
 8001052:	3302      	adds	r3, #2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800105a:	4b37      	ldr	r3, [pc, #220]	; (8001138 <HAL_GPIO_Init+0x2e8>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	43da      	mvns	r2, r3
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	4013      	ands	r3, r2
 8001068:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	2380      	movs	r3, #128	; 0x80
 8001070:	025b      	lsls	r3, r3, #9
 8001072:	4013      	ands	r3, r2
 8001074:	d003      	beq.n	800107e <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	4313      	orrs	r3, r2
 800107c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800107e:	4b2e      	ldr	r3, [pc, #184]	; (8001138 <HAL_GPIO_Init+0x2e8>)
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001084:	4b2c      	ldr	r3, [pc, #176]	; (8001138 <HAL_GPIO_Init+0x2e8>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	43da      	mvns	r2, r3
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685a      	ldr	r2, [r3, #4]
 8001098:	2380      	movs	r3, #128	; 0x80
 800109a:	029b      	lsls	r3, r3, #10
 800109c:	4013      	ands	r3, r2
 800109e:	d003      	beq.n	80010a8 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010a8:	4b23      	ldr	r3, [pc, #140]	; (8001138 <HAL_GPIO_Init+0x2e8>)
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ae:	4b22      	ldr	r3, [pc, #136]	; (8001138 <HAL_GPIO_Init+0x2e8>)
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	43da      	mvns	r2, r3
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	4013      	ands	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685a      	ldr	r2, [r3, #4]
 80010c2:	2380      	movs	r3, #128	; 0x80
 80010c4:	035b      	lsls	r3, r3, #13
 80010c6:	4013      	ands	r3, r2
 80010c8:	d003      	beq.n	80010d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010d2:	4b19      	ldr	r3, [pc, #100]	; (8001138 <HAL_GPIO_Init+0x2e8>)
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80010d8:	4b17      	ldr	r3, [pc, #92]	; (8001138 <HAL_GPIO_Init+0x2e8>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	43da      	mvns	r2, r3
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	4013      	ands	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685a      	ldr	r2, [r3, #4]
 80010ec:	2380      	movs	r3, #128	; 0x80
 80010ee:	039b      	lsls	r3, r3, #14
 80010f0:	4013      	ands	r3, r2
 80010f2:	d003      	beq.n	80010fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80010fc:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <HAL_GPIO_Init+0x2e8>)
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	3301      	adds	r3, #1
 8001106:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	40da      	lsrs	r2, r3
 8001110:	1e13      	subs	r3, r2, #0
 8001112:	d000      	beq.n	8001116 <HAL_GPIO_Init+0x2c6>
 8001114:	e6a8      	b.n	8000e68 <HAL_GPIO_Init+0x18>
  }
}
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	46bd      	mov	sp, r7
 800111a:	b006      	add	sp, #24
 800111c:	bd80      	pop	{r7, pc}
 800111e:	46c0      	nop			; (mov r8, r8)
 8001120:	40021000 	.word	0x40021000
 8001124:	40010000 	.word	0x40010000
 8001128:	50000400 	.word	0x50000400
 800112c:	50000800 	.word	0x50000800
 8001130:	50000c00 	.word	0x50000c00
 8001134:	50001c00 	.word	0x50001c00
 8001138:	40010400 	.word	0x40010400

0800113c <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	000a      	movs	r2, r1
 8001146:	1cfb      	adds	r3, r7, #3
 8001148:	701a      	strb	r2, [r3, #0]
  uint32_t tmpreg = 0U;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 800114e:	4b25      	ldr	r3, [pc, #148]	; (80011e4 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	2380      	movs	r3, #128	; 0x80
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	4013      	ands	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 800115a:	4b23      	ldr	r3, [pc, #140]	; (80011e8 <HAL_PWR_EnterSTOPMode+0xac>)
 800115c:	6a1b      	ldr	r3, [r3, #32]
 800115e:	2201      	movs	r2, #1
 8001160:	4013      	ands	r3, r2
 8001162:	60fb      	str	r3, [r7, #12]
  if((ulpbit != 0) && (vrefinbit != 0))
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d008      	beq.n	800117c <HAL_PWR_EnterSTOPMode+0x40>
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d005      	beq.n	800117c <HAL_PWR_EnterSTOPMode+0x40>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8001170:	4b1c      	ldr	r3, [pc, #112]	; (80011e4 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001176:	491d      	ldr	r1, [pc, #116]	; (80011ec <HAL_PWR_EnterSTOPMode+0xb0>)
 8001178:	400a      	ands	r2, r1
 800117a:	601a      	str	r2, [r3, #0]
  }

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
 800117c:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <HAL_PWR_EnterSTOPMode+0xa8>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	617b      	str	r3, [r7, #20]
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	2203      	movs	r2, #3
 8001186:	4393      	bics	r3, r2
 8001188:	617b      	str	r3, [r7, #20]

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 800118a:	697a      	ldr	r2, [r7, #20]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4313      	orrs	r3, r2
 8001190:	617b      	str	r3, [r7, #20]

  /* Store the new value */
  PWR->CR = tmpreg;
 8001192:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <HAL_PWR_EnterSTOPMode+0xa8>)
 8001194:	697a      	ldr	r2, [r7, #20]
 8001196:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8001198:	4b15      	ldr	r3, [pc, #84]	; (80011f0 <HAL_PWR_EnterSTOPMode+0xb4>)
 800119a:	691a      	ldr	r2, [r3, #16]
 800119c:	4b14      	ldr	r3, [pc, #80]	; (80011f0 <HAL_PWR_EnterSTOPMode+0xb4>)
 800119e:	2104      	movs	r1, #4
 80011a0:	430a      	orrs	r2, r1
 80011a2:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80011a4:	1cfb      	adds	r3, r7, #3
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d101      	bne.n	80011b0 <HAL_PWR_EnterSTOPMode+0x74>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80011ac:	bf30      	wfi
 80011ae:	e002      	b.n	80011b6 <HAL_PWR_EnterSTOPMode+0x7a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80011b0:	bf40      	sev
    __WFE();
 80011b2:	bf20      	wfe
    __WFE();
 80011b4:	bf20      	wfe
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <HAL_PWR_EnterSTOPMode+0xb4>)
 80011b8:	691a      	ldr	r2, [r3, #16]
 80011ba:	4b0d      	ldr	r3, [pc, #52]	; (80011f0 <HAL_PWR_EnterSTOPMode+0xb4>)
 80011bc:	2104      	movs	r1, #4
 80011be:	438a      	bics	r2, r1
 80011c0:	611a      	str	r2, [r3, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d009      	beq.n	80011dc <HAL_PWR_EnterSTOPMode+0xa0>
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d006      	beq.n	80011dc <HAL_PWR_EnterSTOPMode+0xa0>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 80011ce:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <HAL_PWR_EnterSTOPMode+0xa8>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <HAL_PWR_EnterSTOPMode+0xa8>)
 80011d4:	2180      	movs	r1, #128	; 0x80
 80011d6:	0089      	lsls	r1, r1, #2
 80011d8:	430a      	orrs	r2, r1
 80011da:	601a      	str	r2, [r3, #0]
  }
}
 80011dc:	46c0      	nop			; (mov r8, r8)
 80011de:	46bd      	mov	sp, r7
 80011e0:	b006      	add	sp, #24
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40007000 	.word	0x40007000
 80011e8:	40010000 	.word	0x40010000
 80011ec:	fffffdff 	.word	0xfffffdff
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011f4:	b5b0      	push	{r4, r5, r7, lr}
 80011f6:	b08a      	sub	sp, #40	; 0x28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d102      	bne.n	8001208 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	f000 fbb4 	bl	8001970 <HAL_RCC_OscConfig+0x77c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001208:	4bc3      	ldr	r3, [pc, #780]	; (8001518 <HAL_RCC_OscConfig+0x324>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	220c      	movs	r2, #12
 800120e:	4013      	ands	r3, r2
 8001210:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001212:	4bc1      	ldr	r3, [pc, #772]	; (8001518 <HAL_RCC_OscConfig+0x324>)
 8001214:	68da      	ldr	r2, [r3, #12]
 8001216:	2380      	movs	r3, #128	; 0x80
 8001218:	025b      	lsls	r3, r3, #9
 800121a:	4013      	ands	r3, r2
 800121c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2201      	movs	r2, #1
 8001224:	4013      	ands	r3, r2
 8001226:	d100      	bne.n	800122a <HAL_RCC_OscConfig+0x36>
 8001228:	e07e      	b.n	8001328 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800122a:	6a3b      	ldr	r3, [r7, #32]
 800122c:	2b08      	cmp	r3, #8
 800122e:	d007      	beq.n	8001240 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001230:	6a3b      	ldr	r3, [r7, #32]
 8001232:	2b0c      	cmp	r3, #12
 8001234:	d112      	bne.n	800125c <HAL_RCC_OscConfig+0x68>
 8001236:	69fa      	ldr	r2, [r7, #28]
 8001238:	2380      	movs	r3, #128	; 0x80
 800123a:	025b      	lsls	r3, r3, #9
 800123c:	429a      	cmp	r2, r3
 800123e:	d10d      	bne.n	800125c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001240:	4bb5      	ldr	r3, [pc, #724]	; (8001518 <HAL_RCC_OscConfig+0x324>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	2380      	movs	r3, #128	; 0x80
 8001246:	029b      	lsls	r3, r3, #10
 8001248:	4013      	ands	r3, r2
 800124a:	d100      	bne.n	800124e <HAL_RCC_OscConfig+0x5a>
 800124c:	e06b      	b.n	8001326 <HAL_RCC_OscConfig+0x132>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d167      	bne.n	8001326 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	f000 fb8a 	bl	8001970 <HAL_RCC_OscConfig+0x77c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685a      	ldr	r2, [r3, #4]
 8001260:	2380      	movs	r3, #128	; 0x80
 8001262:	025b      	lsls	r3, r3, #9
 8001264:	429a      	cmp	r2, r3
 8001266:	d107      	bne.n	8001278 <HAL_RCC_OscConfig+0x84>
 8001268:	4bab      	ldr	r3, [pc, #684]	; (8001518 <HAL_RCC_OscConfig+0x324>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4baa      	ldr	r3, [pc, #680]	; (8001518 <HAL_RCC_OscConfig+0x324>)
 800126e:	2180      	movs	r1, #128	; 0x80
 8001270:	0249      	lsls	r1, r1, #9
 8001272:	430a      	orrs	r2, r1
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	e027      	b.n	80012c8 <HAL_RCC_OscConfig+0xd4>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	23a0      	movs	r3, #160	; 0xa0
 800127e:	02db      	lsls	r3, r3, #11
 8001280:	429a      	cmp	r2, r3
 8001282:	d10e      	bne.n	80012a2 <HAL_RCC_OscConfig+0xae>
 8001284:	4ba4      	ldr	r3, [pc, #656]	; (8001518 <HAL_RCC_OscConfig+0x324>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4ba3      	ldr	r3, [pc, #652]	; (8001518 <HAL_RCC_OscConfig+0x324>)
 800128a:	2180      	movs	r1, #128	; 0x80
 800128c:	02c9      	lsls	r1, r1, #11
 800128e:	430a      	orrs	r2, r1
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	4ba1      	ldr	r3, [pc, #644]	; (8001518 <HAL_RCC_OscConfig+0x324>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	4ba0      	ldr	r3, [pc, #640]	; (8001518 <HAL_RCC_OscConfig+0x324>)
 8001298:	2180      	movs	r1, #128	; 0x80
 800129a:	0249      	lsls	r1, r1, #9
 800129c:	430a      	orrs	r2, r1
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	e012      	b.n	80012c8 <HAL_RCC_OscConfig+0xd4>
 80012a2:	4b9d      	ldr	r3, [pc, #628]	; (8001518 <HAL_RCC_OscConfig+0x324>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	4b9c      	ldr	r3, [pc, #624]	; (8001518 <HAL_RCC_OscConfig+0x324>)
 80012a8:	499c      	ldr	r1, [pc, #624]	; (800151c <HAL_RCC_OscConfig+0x328>)
 80012aa:	400a      	ands	r2, r1
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	4b9a      	ldr	r3, [pc, #616]	; (8001518 <HAL_RCC_OscConfig+0x324>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	2380      	movs	r3, #128	; 0x80
 80012b4:	025b      	lsls	r3, r3, #9
 80012b6:	4013      	ands	r3, r2
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	4b96      	ldr	r3, [pc, #600]	; (8001518 <HAL_RCC_OscConfig+0x324>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b95      	ldr	r3, [pc, #596]	; (8001518 <HAL_RCC_OscConfig+0x324>)
 80012c2:	4997      	ldr	r1, [pc, #604]	; (8001520 <HAL_RCC_OscConfig+0x32c>)
 80012c4:	400a      	ands	r2, r1
 80012c6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d015      	beq.n	80012fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d0:	f7ff fcd6 	bl	8000c80 <HAL_GetTick>
 80012d4:	0003      	movs	r3, r0
 80012d6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012d8:	e009      	b.n	80012ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012da:	f7ff fcd1 	bl	8000c80 <HAL_GetTick>
 80012de:	0002      	movs	r2, r0
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	1ad3      	subs	r3, r2, r3
 80012e4:	2b64      	cmp	r3, #100	; 0x64
 80012e6:	d902      	bls.n	80012ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012e8:	2303      	movs	r3, #3
 80012ea:	f000 fb41 	bl	8001970 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80012ee:	4b8a      	ldr	r3, [pc, #552]	; (8001518 <HAL_RCC_OscConfig+0x324>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	2380      	movs	r3, #128	; 0x80
 80012f4:	029b      	lsls	r3, r3, #10
 80012f6:	4013      	ands	r3, r2
 80012f8:	d0ef      	beq.n	80012da <HAL_RCC_OscConfig+0xe6>
 80012fa:	e015      	b.n	8001328 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fc:	f7ff fcc0 	bl	8000c80 <HAL_GetTick>
 8001300:	0003      	movs	r3, r0
 8001302:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001304:	e008      	b.n	8001318 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001306:	f7ff fcbb 	bl	8000c80 <HAL_GetTick>
 800130a:	0002      	movs	r2, r0
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b64      	cmp	r3, #100	; 0x64
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e32b      	b.n	8001970 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001318:	4b7f      	ldr	r3, [pc, #508]	; (8001518 <HAL_RCC_OscConfig+0x324>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	2380      	movs	r3, #128	; 0x80
 800131e:	029b      	lsls	r3, r3, #10
 8001320:	4013      	ands	r3, r2
 8001322:	d1f0      	bne.n	8001306 <HAL_RCC_OscConfig+0x112>
 8001324:	e000      	b.n	8001328 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001326:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2202      	movs	r2, #2
 800132e:	4013      	ands	r3, r2
 8001330:	d100      	bne.n	8001334 <HAL_RCC_OscConfig+0x140>
 8001332:	e08c      	b.n	800144e <HAL_RCC_OscConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800133a:	6a3b      	ldr	r3, [r7, #32]
 800133c:	2b04      	cmp	r3, #4
 800133e:	d005      	beq.n	800134c <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001340:	6a3b      	ldr	r3, [r7, #32]
 8001342:	2b0c      	cmp	r3, #12
 8001344:	d13f      	bne.n	80013c6 <HAL_RCC_OscConfig+0x1d2>
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d13c      	bne.n	80013c6 <HAL_RCC_OscConfig+0x1d2>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800134c:	4b72      	ldr	r3, [pc, #456]	; (8001518 <HAL_RCC_OscConfig+0x324>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2204      	movs	r2, #4
 8001352:	4013      	ands	r3, r2
 8001354:	d004      	beq.n	8001360 <HAL_RCC_OscConfig+0x16c>
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d101      	bne.n	8001360 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	e307      	b.n	8001970 <HAL_RCC_OscConfig+0x77c>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001360:	4b6d      	ldr	r3, [pc, #436]	; (8001518 <HAL_RCC_OscConfig+0x324>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	4a6f      	ldr	r2, [pc, #444]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 8001366:	4013      	ands	r3, r2
 8001368:	0019      	movs	r1, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	691b      	ldr	r3, [r3, #16]
 800136e:	021a      	lsls	r2, r3, #8
 8001370:	4b69      	ldr	r3, [pc, #420]	; (8001518 <HAL_RCC_OscConfig+0x324>)
 8001372:	430a      	orrs	r2, r1
 8001374:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001376:	4b68      	ldr	r3, [pc, #416]	; (8001518 <HAL_RCC_OscConfig+0x324>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2209      	movs	r2, #9
 800137c:	4393      	bics	r3, r2
 800137e:	0019      	movs	r1, r3
 8001380:	4b65      	ldr	r3, [pc, #404]	; (8001518 <HAL_RCC_OscConfig+0x324>)
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	430a      	orrs	r2, r1
 8001386:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001388:	f000 fc44 	bl	8001c14 <HAL_RCC_GetSysClockFreq>
 800138c:	0001      	movs	r1, r0
 800138e:	4b62      	ldr	r3, [pc, #392]	; (8001518 <HAL_RCC_OscConfig+0x324>)
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	091b      	lsrs	r3, r3, #4
 8001394:	220f      	movs	r2, #15
 8001396:	4013      	ands	r3, r2
 8001398:	4a63      	ldr	r2, [pc, #396]	; (8001528 <HAL_RCC_OscConfig+0x334>)
 800139a:	5cd3      	ldrb	r3, [r2, r3]
 800139c:	000a      	movs	r2, r1
 800139e:	40da      	lsrs	r2, r3
 80013a0:	4b62      	ldr	r3, [pc, #392]	; (800152c <HAL_RCC_OscConfig+0x338>)
 80013a2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80013a4:	4b62      	ldr	r3, [pc, #392]	; (8001530 <HAL_RCC_OscConfig+0x33c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2513      	movs	r5, #19
 80013aa:	197c      	adds	r4, r7, r5
 80013ac:	0018      	movs	r0, r3
 80013ae:	f7ff fc21 	bl	8000bf4 <HAL_InitTick>
 80013b2:	0003      	movs	r3, r0
 80013b4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80013b6:	197b      	adds	r3, r7, r5
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d047      	beq.n	800144e <HAL_RCC_OscConfig+0x25a>
      {
        return status;
 80013be:	2313      	movs	r3, #19
 80013c0:	18fb      	adds	r3, r7, r3
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	e2d4      	b.n	8001970 <HAL_RCC_OscConfig+0x77c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d027      	beq.n	800141c <HAL_RCC_OscConfig+0x228>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80013cc:	4b52      	ldr	r3, [pc, #328]	; (8001518 <HAL_RCC_OscConfig+0x324>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2209      	movs	r2, #9
 80013d2:	4393      	bics	r3, r2
 80013d4:	0019      	movs	r1, r3
 80013d6:	4b50      	ldr	r3, [pc, #320]	; (8001518 <HAL_RCC_OscConfig+0x324>)
 80013d8:	697a      	ldr	r2, [r7, #20]
 80013da:	430a      	orrs	r2, r1
 80013dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013de:	f7ff fc4f 	bl	8000c80 <HAL_GetTick>
 80013e2:	0003      	movs	r3, r0
 80013e4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013e8:	f7ff fc4a 	bl	8000c80 <HAL_GetTick>
 80013ec:	0002      	movs	r2, r0
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e2ba      	b.n	8001970 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013fa:	4b47      	ldr	r3, [pc, #284]	; (8001518 <HAL_RCC_OscConfig+0x324>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	2204      	movs	r2, #4
 8001400:	4013      	ands	r3, r2
 8001402:	d0f1      	beq.n	80013e8 <HAL_RCC_OscConfig+0x1f4>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001404:	4b44      	ldr	r3, [pc, #272]	; (8001518 <HAL_RCC_OscConfig+0x324>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	4a46      	ldr	r2, [pc, #280]	; (8001524 <HAL_RCC_OscConfig+0x330>)
 800140a:	4013      	ands	r3, r2
 800140c:	0019      	movs	r1, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	021a      	lsls	r2, r3, #8
 8001414:	4b40      	ldr	r3, [pc, #256]	; (8001518 <HAL_RCC_OscConfig+0x324>)
 8001416:	430a      	orrs	r2, r1
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	e018      	b.n	800144e <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800141c:	4b3e      	ldr	r3, [pc, #248]	; (8001518 <HAL_RCC_OscConfig+0x324>)
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	4b3d      	ldr	r3, [pc, #244]	; (8001518 <HAL_RCC_OscConfig+0x324>)
 8001422:	2101      	movs	r1, #1
 8001424:	438a      	bics	r2, r1
 8001426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001428:	f7ff fc2a 	bl	8000c80 <HAL_GetTick>
 800142c:	0003      	movs	r3, r0
 800142e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001430:	e008      	b.n	8001444 <HAL_RCC_OscConfig+0x250>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001432:	f7ff fc25 	bl	8000c80 <HAL_GetTick>
 8001436:	0002      	movs	r2, r0
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e295      	b.n	8001970 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001444:	4b34      	ldr	r3, [pc, #208]	; (8001518 <HAL_RCC_OscConfig+0x324>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2204      	movs	r2, #4
 800144a:	4013      	ands	r3, r2
 800144c:	d1f1      	bne.n	8001432 <HAL_RCC_OscConfig+0x23e>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2210      	movs	r2, #16
 8001454:	4013      	ands	r3, r2
 8001456:	d100      	bne.n	800145a <HAL_RCC_OscConfig+0x266>
 8001458:	e0a3      	b.n	80015a2 <HAL_RCC_OscConfig+0x3ae>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800145a:	6a3b      	ldr	r3, [r7, #32]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d141      	bne.n	80014e4 <HAL_RCC_OscConfig+0x2f0>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001460:	4b2d      	ldr	r3, [pc, #180]	; (8001518 <HAL_RCC_OscConfig+0x324>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	2380      	movs	r3, #128	; 0x80
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4013      	ands	r3, r2
 800146a:	d005      	beq.n	8001478 <HAL_RCC_OscConfig+0x284>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	69db      	ldr	r3, [r3, #28]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d101      	bne.n	8001478 <HAL_RCC_OscConfig+0x284>
      {
        return HAL_ERROR;
 8001474:	2301      	movs	r3, #1
 8001476:	e27b      	b.n	8001970 <HAL_RCC_OscConfig+0x77c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001478:	4b27      	ldr	r3, [pc, #156]	; (8001518 <HAL_RCC_OscConfig+0x324>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	4a2d      	ldr	r2, [pc, #180]	; (8001534 <HAL_RCC_OscConfig+0x340>)
 800147e:	4013      	ands	r3, r2
 8001480:	0019      	movs	r1, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001486:	4b24      	ldr	r3, [pc, #144]	; (8001518 <HAL_RCC_OscConfig+0x324>)
 8001488:	430a      	orrs	r2, r1
 800148a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800148c:	4b22      	ldr	r3, [pc, #136]	; (8001518 <HAL_RCC_OscConfig+0x324>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	021b      	lsls	r3, r3, #8
 8001492:	0a19      	lsrs	r1, r3, #8
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6a1b      	ldr	r3, [r3, #32]
 8001498:	061a      	lsls	r2, r3, #24
 800149a:	4b1f      	ldr	r3, [pc, #124]	; (8001518 <HAL_RCC_OscConfig+0x324>)
 800149c:	430a      	orrs	r2, r1
 800149e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a4:	0b5b      	lsrs	r3, r3, #13
 80014a6:	3301      	adds	r3, #1
 80014a8:	2280      	movs	r2, #128	; 0x80
 80014aa:	0212      	lsls	r2, r2, #8
 80014ac:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80014ae:	4b1a      	ldr	r3, [pc, #104]	; (8001518 <HAL_RCC_OscConfig+0x324>)
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	091b      	lsrs	r3, r3, #4
 80014b4:	210f      	movs	r1, #15
 80014b6:	400b      	ands	r3, r1
 80014b8:	491b      	ldr	r1, [pc, #108]	; (8001528 <HAL_RCC_OscConfig+0x334>)
 80014ba:	5ccb      	ldrb	r3, [r1, r3]
 80014bc:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80014be:	4b1b      	ldr	r3, [pc, #108]	; (800152c <HAL_RCC_OscConfig+0x338>)
 80014c0:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80014c2:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <HAL_RCC_OscConfig+0x33c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2513      	movs	r5, #19
 80014c8:	197c      	adds	r4, r7, r5
 80014ca:	0018      	movs	r0, r3
 80014cc:	f7ff fb92 	bl	8000bf4 <HAL_InitTick>
 80014d0:	0003      	movs	r3, r0
 80014d2:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80014d4:	197b      	adds	r3, r7, r5
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d062      	beq.n	80015a2 <HAL_RCC_OscConfig+0x3ae>
        {
          return status;
 80014dc:	2313      	movs	r3, #19
 80014de:	18fb      	adds	r3, r7, r3
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	e245      	b.n	8001970 <HAL_RCC_OscConfig+0x77c>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	69db      	ldr	r3, [r3, #28]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d040      	beq.n	800156e <HAL_RCC_OscConfig+0x37a>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014ec:	4b0a      	ldr	r3, [pc, #40]	; (8001518 <HAL_RCC_OscConfig+0x324>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b09      	ldr	r3, [pc, #36]	; (8001518 <HAL_RCC_OscConfig+0x324>)
 80014f2:	2180      	movs	r1, #128	; 0x80
 80014f4:	0049      	lsls	r1, r1, #1
 80014f6:	430a      	orrs	r2, r1
 80014f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fa:	f7ff fbc1 	bl	8000c80 <HAL_GetTick>
 80014fe:	0003      	movs	r3, r0
 8001500:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001502:	e019      	b.n	8001538 <HAL_RCC_OscConfig+0x344>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001504:	f7ff fbbc 	bl	8000c80 <HAL_GetTick>
 8001508:	0002      	movs	r2, r0
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b02      	cmp	r3, #2
 8001510:	d912      	bls.n	8001538 <HAL_RCC_OscConfig+0x344>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e22c      	b.n	8001970 <HAL_RCC_OscConfig+0x77c>
 8001516:	46c0      	nop			; (mov r8, r8)
 8001518:	40021000 	.word	0x40021000
 800151c:	fffeffff 	.word	0xfffeffff
 8001520:	fffbffff 	.word	0xfffbffff
 8001524:	ffffe0ff 	.word	0xffffe0ff
 8001528:	080026a4 	.word	0x080026a4
 800152c:	20000000 	.word	0x20000000
 8001530:	20000004 	.word	0x20000004
 8001534:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001538:	4bc6      	ldr	r3, [pc, #792]	; (8001854 <HAL_RCC_OscConfig+0x660>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	2380      	movs	r3, #128	; 0x80
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	4013      	ands	r3, r2
 8001542:	d0df      	beq.n	8001504 <HAL_RCC_OscConfig+0x310>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001544:	4bc3      	ldr	r3, [pc, #780]	; (8001854 <HAL_RCC_OscConfig+0x660>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	4ac3      	ldr	r2, [pc, #780]	; (8001858 <HAL_RCC_OscConfig+0x664>)
 800154a:	4013      	ands	r3, r2
 800154c:	0019      	movs	r1, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001552:	4bc0      	ldr	r3, [pc, #768]	; (8001854 <HAL_RCC_OscConfig+0x660>)
 8001554:	430a      	orrs	r2, r1
 8001556:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001558:	4bbe      	ldr	r3, [pc, #760]	; (8001854 <HAL_RCC_OscConfig+0x660>)
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	021b      	lsls	r3, r3, #8
 800155e:	0a19      	lsrs	r1, r3, #8
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	061a      	lsls	r2, r3, #24
 8001566:	4bbb      	ldr	r3, [pc, #748]	; (8001854 <HAL_RCC_OscConfig+0x660>)
 8001568:	430a      	orrs	r2, r1
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	e019      	b.n	80015a2 <HAL_RCC_OscConfig+0x3ae>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800156e:	4bb9      	ldr	r3, [pc, #740]	; (8001854 <HAL_RCC_OscConfig+0x660>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	4bb8      	ldr	r3, [pc, #736]	; (8001854 <HAL_RCC_OscConfig+0x660>)
 8001574:	49b9      	ldr	r1, [pc, #740]	; (800185c <HAL_RCC_OscConfig+0x668>)
 8001576:	400a      	ands	r2, r1
 8001578:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800157a:	f7ff fb81 	bl	8000c80 <HAL_GetTick>
 800157e:	0003      	movs	r3, r0
 8001580:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001584:	f7ff fb7c 	bl	8000c80 <HAL_GetTick>
 8001588:	0002      	movs	r2, r0
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e1ec      	b.n	8001970 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001596:	4baf      	ldr	r3, [pc, #700]	; (8001854 <HAL_RCC_OscConfig+0x660>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	2380      	movs	r3, #128	; 0x80
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	4013      	ands	r3, r2
 80015a0:	d1f0      	bne.n	8001584 <HAL_RCC_OscConfig+0x390>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2208      	movs	r2, #8
 80015a8:	4013      	ands	r3, r2
 80015aa:	d036      	beq.n	800161a <HAL_RCC_OscConfig+0x426>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	695b      	ldr	r3, [r3, #20]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d019      	beq.n	80015e8 <HAL_RCC_OscConfig+0x3f4>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015b4:	4ba7      	ldr	r3, [pc, #668]	; (8001854 <HAL_RCC_OscConfig+0x660>)
 80015b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015b8:	4ba6      	ldr	r3, [pc, #664]	; (8001854 <HAL_RCC_OscConfig+0x660>)
 80015ba:	2101      	movs	r1, #1
 80015bc:	430a      	orrs	r2, r1
 80015be:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c0:	f7ff fb5e 	bl	8000c80 <HAL_GetTick>
 80015c4:	0003      	movs	r3, r0
 80015c6:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015ca:	f7ff fb59 	bl	8000c80 <HAL_GetTick>
 80015ce:	0002      	movs	r2, r0
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e1c9      	b.n	8001970 <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015dc:	4b9d      	ldr	r3, [pc, #628]	; (8001854 <HAL_RCC_OscConfig+0x660>)
 80015de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015e0:	2202      	movs	r2, #2
 80015e2:	4013      	ands	r3, r2
 80015e4:	d0f1      	beq.n	80015ca <HAL_RCC_OscConfig+0x3d6>
 80015e6:	e018      	b.n	800161a <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015e8:	4b9a      	ldr	r3, [pc, #616]	; (8001854 <HAL_RCC_OscConfig+0x660>)
 80015ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80015ec:	4b99      	ldr	r3, [pc, #612]	; (8001854 <HAL_RCC_OscConfig+0x660>)
 80015ee:	2101      	movs	r1, #1
 80015f0:	438a      	bics	r2, r1
 80015f2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f4:	f7ff fb44 	bl	8000c80 <HAL_GetTick>
 80015f8:	0003      	movs	r3, r0
 80015fa:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x41c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015fe:	f7ff fb3f 	bl	8000c80 <HAL_GetTick>
 8001602:	0002      	movs	r2, r0
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x41c>
        {
          return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e1af      	b.n	8001970 <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001610:	4b90      	ldr	r3, [pc, #576]	; (8001854 <HAL_RCC_OscConfig+0x660>)
 8001612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001614:	2202      	movs	r2, #2
 8001616:	4013      	ands	r3, r2
 8001618:	d1f1      	bne.n	80015fe <HAL_RCC_OscConfig+0x40a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2204      	movs	r2, #4
 8001620:	4013      	ands	r3, r2
 8001622:	d100      	bne.n	8001626 <HAL_RCC_OscConfig+0x432>
 8001624:	e0af      	b.n	8001786 <HAL_RCC_OscConfig+0x592>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001626:	2327      	movs	r3, #39	; 0x27
 8001628:	18fb      	adds	r3, r7, r3
 800162a:	2200      	movs	r2, #0
 800162c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800162e:	4b89      	ldr	r3, [pc, #548]	; (8001854 <HAL_RCC_OscConfig+0x660>)
 8001630:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001632:	2380      	movs	r3, #128	; 0x80
 8001634:	055b      	lsls	r3, r3, #21
 8001636:	4013      	ands	r3, r2
 8001638:	d10a      	bne.n	8001650 <HAL_RCC_OscConfig+0x45c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800163a:	4b86      	ldr	r3, [pc, #536]	; (8001854 <HAL_RCC_OscConfig+0x660>)
 800163c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800163e:	4b85      	ldr	r3, [pc, #532]	; (8001854 <HAL_RCC_OscConfig+0x660>)
 8001640:	2180      	movs	r1, #128	; 0x80
 8001642:	0549      	lsls	r1, r1, #21
 8001644:	430a      	orrs	r2, r1
 8001646:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001648:	2327      	movs	r3, #39	; 0x27
 800164a:	18fb      	adds	r3, r7, r3
 800164c:	2201      	movs	r2, #1
 800164e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001650:	4b83      	ldr	r3, [pc, #524]	; (8001860 <HAL_RCC_OscConfig+0x66c>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	2380      	movs	r3, #128	; 0x80
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	4013      	ands	r3, r2
 800165a:	d11a      	bne.n	8001692 <HAL_RCC_OscConfig+0x49e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800165c:	4b80      	ldr	r3, [pc, #512]	; (8001860 <HAL_RCC_OscConfig+0x66c>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4b7f      	ldr	r3, [pc, #508]	; (8001860 <HAL_RCC_OscConfig+0x66c>)
 8001662:	2180      	movs	r1, #128	; 0x80
 8001664:	0049      	lsls	r1, r1, #1
 8001666:	430a      	orrs	r2, r1
 8001668:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800166a:	f7ff fb09 	bl	8000c80 <HAL_GetTick>
 800166e:	0003      	movs	r3, r0
 8001670:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x492>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001674:	f7ff fb04 	bl	8000c80 <HAL_GetTick>
 8001678:	0002      	movs	r2, r0
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b64      	cmp	r3, #100	; 0x64
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x492>
        {
          return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e174      	b.n	8001970 <HAL_RCC_OscConfig+0x77c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001686:	4b76      	ldr	r3, [pc, #472]	; (8001860 <HAL_RCC_OscConfig+0x66c>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	2380      	movs	r3, #128	; 0x80
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	4013      	ands	r3, r2
 8001690:	d0f0      	beq.n	8001674 <HAL_RCC_OscConfig+0x480>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	689a      	ldr	r2, [r3, #8]
 8001696:	2380      	movs	r3, #128	; 0x80
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	429a      	cmp	r2, r3
 800169c:	d107      	bne.n	80016ae <HAL_RCC_OscConfig+0x4ba>
 800169e:	4b6d      	ldr	r3, [pc, #436]	; (8001854 <HAL_RCC_OscConfig+0x660>)
 80016a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016a2:	4b6c      	ldr	r3, [pc, #432]	; (8001854 <HAL_RCC_OscConfig+0x660>)
 80016a4:	2180      	movs	r1, #128	; 0x80
 80016a6:	0049      	lsls	r1, r1, #1
 80016a8:	430a      	orrs	r2, r1
 80016aa:	651a      	str	r2, [r3, #80]	; 0x50
 80016ac:	e031      	b.n	8001712 <HAL_RCC_OscConfig+0x51e>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d10c      	bne.n	80016d0 <HAL_RCC_OscConfig+0x4dc>
 80016b6:	4b67      	ldr	r3, [pc, #412]	; (8001854 <HAL_RCC_OscConfig+0x660>)
 80016b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016ba:	4b66      	ldr	r3, [pc, #408]	; (8001854 <HAL_RCC_OscConfig+0x660>)
 80016bc:	4967      	ldr	r1, [pc, #412]	; (800185c <HAL_RCC_OscConfig+0x668>)
 80016be:	400a      	ands	r2, r1
 80016c0:	651a      	str	r2, [r3, #80]	; 0x50
 80016c2:	4b64      	ldr	r3, [pc, #400]	; (8001854 <HAL_RCC_OscConfig+0x660>)
 80016c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016c6:	4b63      	ldr	r3, [pc, #396]	; (8001854 <HAL_RCC_OscConfig+0x660>)
 80016c8:	4966      	ldr	r1, [pc, #408]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 80016ca:	400a      	ands	r2, r1
 80016cc:	651a      	str	r2, [r3, #80]	; 0x50
 80016ce:	e020      	b.n	8001712 <HAL_RCC_OscConfig+0x51e>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	23a0      	movs	r3, #160	; 0xa0
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	429a      	cmp	r2, r3
 80016da:	d10e      	bne.n	80016fa <HAL_RCC_OscConfig+0x506>
 80016dc:	4b5d      	ldr	r3, [pc, #372]	; (8001854 <HAL_RCC_OscConfig+0x660>)
 80016de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016e0:	4b5c      	ldr	r3, [pc, #368]	; (8001854 <HAL_RCC_OscConfig+0x660>)
 80016e2:	2180      	movs	r1, #128	; 0x80
 80016e4:	00c9      	lsls	r1, r1, #3
 80016e6:	430a      	orrs	r2, r1
 80016e8:	651a      	str	r2, [r3, #80]	; 0x50
 80016ea:	4b5a      	ldr	r3, [pc, #360]	; (8001854 <HAL_RCC_OscConfig+0x660>)
 80016ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016ee:	4b59      	ldr	r3, [pc, #356]	; (8001854 <HAL_RCC_OscConfig+0x660>)
 80016f0:	2180      	movs	r1, #128	; 0x80
 80016f2:	0049      	lsls	r1, r1, #1
 80016f4:	430a      	orrs	r2, r1
 80016f6:	651a      	str	r2, [r3, #80]	; 0x50
 80016f8:	e00b      	b.n	8001712 <HAL_RCC_OscConfig+0x51e>
 80016fa:	4b56      	ldr	r3, [pc, #344]	; (8001854 <HAL_RCC_OscConfig+0x660>)
 80016fc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016fe:	4b55      	ldr	r3, [pc, #340]	; (8001854 <HAL_RCC_OscConfig+0x660>)
 8001700:	4956      	ldr	r1, [pc, #344]	; (800185c <HAL_RCC_OscConfig+0x668>)
 8001702:	400a      	ands	r2, r1
 8001704:	651a      	str	r2, [r3, #80]	; 0x50
 8001706:	4b53      	ldr	r3, [pc, #332]	; (8001854 <HAL_RCC_OscConfig+0x660>)
 8001708:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800170a:	4b52      	ldr	r3, [pc, #328]	; (8001854 <HAL_RCC_OscConfig+0x660>)
 800170c:	4955      	ldr	r1, [pc, #340]	; (8001864 <HAL_RCC_OscConfig+0x670>)
 800170e:	400a      	ands	r2, r1
 8001710:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d015      	beq.n	8001746 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800171a:	f7ff fab1 	bl	8000c80 <HAL_GetTick>
 800171e:	0003      	movs	r3, r0
 8001720:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001722:	e009      	b.n	8001738 <HAL_RCC_OscConfig+0x544>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001724:	f7ff faac 	bl	8000c80 <HAL_GetTick>
 8001728:	0002      	movs	r2, r0
 800172a:	69bb      	ldr	r3, [r7, #24]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	4a4e      	ldr	r2, [pc, #312]	; (8001868 <HAL_RCC_OscConfig+0x674>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x544>
        {
          return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e11b      	b.n	8001970 <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001738:	4b46      	ldr	r3, [pc, #280]	; (8001854 <HAL_RCC_OscConfig+0x660>)
 800173a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800173c:	2380      	movs	r3, #128	; 0x80
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4013      	ands	r3, r2
 8001742:	d0ef      	beq.n	8001724 <HAL_RCC_OscConfig+0x530>
 8001744:	e014      	b.n	8001770 <HAL_RCC_OscConfig+0x57c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001746:	f7ff fa9b 	bl	8000c80 <HAL_GetTick>
 800174a:	0003      	movs	r3, r0
 800174c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800174e:	e009      	b.n	8001764 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001750:	f7ff fa96 	bl	8000c80 <HAL_GetTick>
 8001754:	0002      	movs	r2, r0
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	4a43      	ldr	r2, [pc, #268]	; (8001868 <HAL_RCC_OscConfig+0x674>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d901      	bls.n	8001764 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e105      	b.n	8001970 <HAL_RCC_OscConfig+0x77c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001764:	4b3b      	ldr	r3, [pc, #236]	; (8001854 <HAL_RCC_OscConfig+0x660>)
 8001766:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001768:	2380      	movs	r3, #128	; 0x80
 800176a:	009b      	lsls	r3, r3, #2
 800176c:	4013      	ands	r3, r2
 800176e:	d1ef      	bne.n	8001750 <HAL_RCC_OscConfig+0x55c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001770:	2327      	movs	r3, #39	; 0x27
 8001772:	18fb      	adds	r3, r7, r3
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b01      	cmp	r3, #1
 8001778:	d105      	bne.n	8001786 <HAL_RCC_OscConfig+0x592>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800177a:	4b36      	ldr	r3, [pc, #216]	; (8001854 <HAL_RCC_OscConfig+0x660>)
 800177c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800177e:	4b35      	ldr	r3, [pc, #212]	; (8001854 <HAL_RCC_OscConfig+0x660>)
 8001780:	493a      	ldr	r1, [pc, #232]	; (800186c <HAL_RCC_OscConfig+0x678>)
 8001782:	400a      	ands	r2, r1
 8001784:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2220      	movs	r2, #32
 800178c:	4013      	ands	r3, r2
 800178e:	d049      	beq.n	8001824 <HAL_RCC_OscConfig+0x630>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d026      	beq.n	80017e6 <HAL_RCC_OscConfig+0x5f2>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001798:	4b2e      	ldr	r3, [pc, #184]	; (8001854 <HAL_RCC_OscConfig+0x660>)
 800179a:	689a      	ldr	r2, [r3, #8]
 800179c:	4b2d      	ldr	r3, [pc, #180]	; (8001854 <HAL_RCC_OscConfig+0x660>)
 800179e:	2101      	movs	r1, #1
 80017a0:	430a      	orrs	r2, r1
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	4b2b      	ldr	r3, [pc, #172]	; (8001854 <HAL_RCC_OscConfig+0x660>)
 80017a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017a8:	4b2a      	ldr	r3, [pc, #168]	; (8001854 <HAL_RCC_OscConfig+0x660>)
 80017aa:	2101      	movs	r1, #1
 80017ac:	430a      	orrs	r2, r1
 80017ae:	635a      	str	r2, [r3, #52]	; 0x34
 80017b0:	4b2f      	ldr	r3, [pc, #188]	; (8001870 <HAL_RCC_OscConfig+0x67c>)
 80017b2:	6a1a      	ldr	r2, [r3, #32]
 80017b4:	4b2e      	ldr	r3, [pc, #184]	; (8001870 <HAL_RCC_OscConfig+0x67c>)
 80017b6:	2180      	movs	r1, #128	; 0x80
 80017b8:	0189      	lsls	r1, r1, #6
 80017ba:	430a      	orrs	r2, r1
 80017bc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017be:	f7ff fa5f 	bl	8000c80 <HAL_GetTick>
 80017c2:	0003      	movs	r3, r0
 80017c4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017c8:	f7ff fa5a 	bl	8000c80 <HAL_GetTick>
 80017cc:	0002      	movs	r2, r0
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e0ca      	b.n	8001970 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80017da:	4b1e      	ldr	r3, [pc, #120]	; (8001854 <HAL_RCC_OscConfig+0x660>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	2202      	movs	r2, #2
 80017e0:	4013      	ands	r3, r2
 80017e2:	d0f1      	beq.n	80017c8 <HAL_RCC_OscConfig+0x5d4>
 80017e4:	e01e      	b.n	8001824 <HAL_RCC_OscConfig+0x630>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80017e6:	4b1b      	ldr	r3, [pc, #108]	; (8001854 <HAL_RCC_OscConfig+0x660>)
 80017e8:	689a      	ldr	r2, [r3, #8]
 80017ea:	4b1a      	ldr	r3, [pc, #104]	; (8001854 <HAL_RCC_OscConfig+0x660>)
 80017ec:	2101      	movs	r1, #1
 80017ee:	438a      	bics	r2, r1
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	4b1f      	ldr	r3, [pc, #124]	; (8001870 <HAL_RCC_OscConfig+0x67c>)
 80017f4:	6a1a      	ldr	r2, [r3, #32]
 80017f6:	4b1e      	ldr	r3, [pc, #120]	; (8001870 <HAL_RCC_OscConfig+0x67c>)
 80017f8:	491e      	ldr	r1, [pc, #120]	; (8001874 <HAL_RCC_OscConfig+0x680>)
 80017fa:	400a      	ands	r2, r1
 80017fc:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017fe:	f7ff fa3f 	bl	8000c80 <HAL_GetTick>
 8001802:	0003      	movs	r3, r0
 8001804:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x626>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001808:	f7ff fa3a 	bl	8000c80 <HAL_GetTick>
 800180c:	0002      	movs	r2, r0
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x626>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e0aa      	b.n	8001970 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800181a:	4b0e      	ldr	r3, [pc, #56]	; (8001854 <HAL_RCC_OscConfig+0x660>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	2202      	movs	r2, #2
 8001820:	4013      	ands	r3, r2
 8001822:	d1f1      	bne.n	8001808 <HAL_RCC_OscConfig+0x614>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001828:	2b00      	cmp	r3, #0
 800182a:	d100      	bne.n	800182e <HAL_RCC_OscConfig+0x63a>
 800182c:	e09f      	b.n	800196e <HAL_RCC_OscConfig+0x77a>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800182e:	6a3b      	ldr	r3, [r7, #32]
 8001830:	2b0c      	cmp	r3, #12
 8001832:	d100      	bne.n	8001836 <HAL_RCC_OscConfig+0x642>
 8001834:	e078      	b.n	8001928 <HAL_RCC_OscConfig+0x734>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183a:	2b02      	cmp	r3, #2
 800183c:	d159      	bne.n	80018f2 <HAL_RCC_OscConfig+0x6fe>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800183e:	4b05      	ldr	r3, [pc, #20]	; (8001854 <HAL_RCC_OscConfig+0x660>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	4b04      	ldr	r3, [pc, #16]	; (8001854 <HAL_RCC_OscConfig+0x660>)
 8001844:	490c      	ldr	r1, [pc, #48]	; (8001878 <HAL_RCC_OscConfig+0x684>)
 8001846:	400a      	ands	r2, r1
 8001848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184a:	f7ff fa19 	bl	8000c80 <HAL_GetTick>
 800184e:	0003      	movs	r3, r0
 8001850:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001852:	e01c      	b.n	800188e <HAL_RCC_OscConfig+0x69a>
 8001854:	40021000 	.word	0x40021000
 8001858:	ffff1fff 	.word	0xffff1fff
 800185c:	fffffeff 	.word	0xfffffeff
 8001860:	40007000 	.word	0x40007000
 8001864:	fffffbff 	.word	0xfffffbff
 8001868:	00001388 	.word	0x00001388
 800186c:	efffffff 	.word	0xefffffff
 8001870:	40010000 	.word	0x40010000
 8001874:	ffffdfff 	.word	0xffffdfff
 8001878:	feffffff 	.word	0xfeffffff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800187c:	f7ff fa00 	bl	8000c80 <HAL_GetTick>
 8001880:	0002      	movs	r2, r0
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x69a>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e070      	b.n	8001970 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800188e:	4b3a      	ldr	r3, [pc, #232]	; (8001978 <HAL_RCC_OscConfig+0x784>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	2380      	movs	r3, #128	; 0x80
 8001894:	049b      	lsls	r3, r3, #18
 8001896:	4013      	ands	r3, r2
 8001898:	d1f0      	bne.n	800187c <HAL_RCC_OscConfig+0x688>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800189a:	4b37      	ldr	r3, [pc, #220]	; (8001978 <HAL_RCC_OscConfig+0x784>)
 800189c:	68db      	ldr	r3, [r3, #12]
 800189e:	4a37      	ldr	r2, [pc, #220]	; (800197c <HAL_RCC_OscConfig+0x788>)
 80018a0:	4013      	ands	r3, r2
 80018a2:	0019      	movs	r1, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ac:	431a      	orrs	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b2:	431a      	orrs	r2, r3
 80018b4:	4b30      	ldr	r3, [pc, #192]	; (8001978 <HAL_RCC_OscConfig+0x784>)
 80018b6:	430a      	orrs	r2, r1
 80018b8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018ba:	4b2f      	ldr	r3, [pc, #188]	; (8001978 <HAL_RCC_OscConfig+0x784>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	4b2e      	ldr	r3, [pc, #184]	; (8001978 <HAL_RCC_OscConfig+0x784>)
 80018c0:	2180      	movs	r1, #128	; 0x80
 80018c2:	0449      	lsls	r1, r1, #17
 80018c4:	430a      	orrs	r2, r1
 80018c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c8:	f7ff f9da 	bl	8000c80 <HAL_GetTick>
 80018cc:	0003      	movs	r3, r0
 80018ce:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80018d0:	e008      	b.n	80018e4 <HAL_RCC_OscConfig+0x6f0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018d2:	f7ff f9d5 	bl	8000c80 <HAL_GetTick>
 80018d6:	0002      	movs	r2, r0
 80018d8:	69bb      	ldr	r3, [r7, #24]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b02      	cmp	r3, #2
 80018de:	d901      	bls.n	80018e4 <HAL_RCC_OscConfig+0x6f0>
          {
            return HAL_TIMEOUT;
 80018e0:	2303      	movs	r3, #3
 80018e2:	e045      	b.n	8001970 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80018e4:	4b24      	ldr	r3, [pc, #144]	; (8001978 <HAL_RCC_OscConfig+0x784>)
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	2380      	movs	r3, #128	; 0x80
 80018ea:	049b      	lsls	r3, r3, #18
 80018ec:	4013      	ands	r3, r2
 80018ee:	d0f0      	beq.n	80018d2 <HAL_RCC_OscConfig+0x6de>
 80018f0:	e03d      	b.n	800196e <HAL_RCC_OscConfig+0x77a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f2:	4b21      	ldr	r3, [pc, #132]	; (8001978 <HAL_RCC_OscConfig+0x784>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	4b20      	ldr	r3, [pc, #128]	; (8001978 <HAL_RCC_OscConfig+0x784>)
 80018f8:	4921      	ldr	r1, [pc, #132]	; (8001980 <HAL_RCC_OscConfig+0x78c>)
 80018fa:	400a      	ands	r2, r1
 80018fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018fe:	f7ff f9bf 	bl	8000c80 <HAL_GetTick>
 8001902:	0003      	movs	r3, r0
 8001904:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x726>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001908:	f7ff f9ba 	bl	8000c80 <HAL_GetTick>
 800190c:	0002      	movs	r2, r0
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x726>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e02a      	b.n	8001970 <HAL_RCC_OscConfig+0x77c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800191a:	4b17      	ldr	r3, [pc, #92]	; (8001978 <HAL_RCC_OscConfig+0x784>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	2380      	movs	r3, #128	; 0x80
 8001920:	049b      	lsls	r3, r3, #18
 8001922:	4013      	ands	r3, r2
 8001924:	d1f0      	bne.n	8001908 <HAL_RCC_OscConfig+0x714>
 8001926:	e022      	b.n	800196e <HAL_RCC_OscConfig+0x77a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800192c:	2b01      	cmp	r3, #1
 800192e:	d101      	bne.n	8001934 <HAL_RCC_OscConfig+0x740>
      {
        return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e01d      	b.n	8001970 <HAL_RCC_OscConfig+0x77c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001934:	4b10      	ldr	r3, [pc, #64]	; (8001978 <HAL_RCC_OscConfig+0x784>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800193a:	69fa      	ldr	r2, [r7, #28]
 800193c:	2380      	movs	r3, #128	; 0x80
 800193e:	025b      	lsls	r3, r3, #9
 8001940:	401a      	ands	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001946:	429a      	cmp	r2, r3
 8001948:	d10f      	bne.n	800196a <HAL_RCC_OscConfig+0x776>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800194a:	69fa      	ldr	r2, [r7, #28]
 800194c:	23f0      	movs	r3, #240	; 0xf0
 800194e:	039b      	lsls	r3, r3, #14
 8001950:	401a      	ands	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001956:	429a      	cmp	r2, r3
 8001958:	d107      	bne.n	800196a <HAL_RCC_OscConfig+0x776>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800195a:	69fa      	ldr	r2, [r7, #28]
 800195c:	23c0      	movs	r3, #192	; 0xc0
 800195e:	041b      	lsls	r3, r3, #16
 8001960:	401a      	ands	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001966:	429a      	cmp	r2, r3
 8001968:	d001      	beq.n	800196e <HAL_RCC_OscConfig+0x77a>
        {
          return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e000      	b.n	8001970 <HAL_RCC_OscConfig+0x77c>
        }
      }
    }
  }
  return HAL_OK;
 800196e:	2300      	movs	r3, #0
}
 8001970:	0018      	movs	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	b00a      	add	sp, #40	; 0x28
 8001976:	bdb0      	pop	{r4, r5, r7, pc}
 8001978:	40021000 	.word	0x40021000
 800197c:	ff02ffff 	.word	0xff02ffff
 8001980:	feffffff 	.word	0xfeffffff

08001984 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001984:	b5b0      	push	{r4, r5, r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d101      	bne.n	8001998 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e129      	b.n	8001bec <HAL_RCC_ClockConfig+0x268>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001998:	4b96      	ldr	r3, [pc, #600]	; (8001bf4 <HAL_RCC_ClockConfig+0x270>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2201      	movs	r2, #1
 800199e:	4013      	ands	r3, r2
 80019a0:	683a      	ldr	r2, [r7, #0]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d91e      	bls.n	80019e4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a6:	4b93      	ldr	r3, [pc, #588]	; (8001bf4 <HAL_RCC_ClockConfig+0x270>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2201      	movs	r2, #1
 80019ac:	4393      	bics	r3, r2
 80019ae:	0019      	movs	r1, r3
 80019b0:	4b90      	ldr	r3, [pc, #576]	; (8001bf4 <HAL_RCC_ClockConfig+0x270>)
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	430a      	orrs	r2, r1
 80019b6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80019b8:	f7ff f962 	bl	8000c80 <HAL_GetTick>
 80019bc:	0003      	movs	r3, r0
 80019be:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019c0:	e009      	b.n	80019d6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019c2:	f7ff f95d 	bl	8000c80 <HAL_GetTick>
 80019c6:	0002      	movs	r2, r0
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	4a8a      	ldr	r2, [pc, #552]	; (8001bf8 <HAL_RCC_ClockConfig+0x274>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e10a      	b.n	8001bec <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019d6:	4b87      	ldr	r3, [pc, #540]	; (8001bf4 <HAL_RCC_ClockConfig+0x270>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	2201      	movs	r2, #1
 80019dc:	4013      	ands	r3, r2
 80019de:	683a      	ldr	r2, [r7, #0]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d1ee      	bne.n	80019c2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2202      	movs	r2, #2
 80019ea:	4013      	ands	r3, r2
 80019ec:	d009      	beq.n	8001a02 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019ee:	4b83      	ldr	r3, [pc, #524]	; (8001bfc <HAL_RCC_ClockConfig+0x278>)
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	22f0      	movs	r2, #240	; 0xf0
 80019f4:	4393      	bics	r3, r2
 80019f6:	0019      	movs	r1, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	4b7f      	ldr	r3, [pc, #508]	; (8001bfc <HAL_RCC_ClockConfig+0x278>)
 80019fe:	430a      	orrs	r2, r1
 8001a00:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	2201      	movs	r2, #1
 8001a08:	4013      	ands	r3, r2
 8001a0a:	d100      	bne.n	8001a0e <HAL_RCC_ClockConfig+0x8a>
 8001a0c:	e089      	b.n	8001b22 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d107      	bne.n	8001a26 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a16:	4b79      	ldr	r3, [pc, #484]	; (8001bfc <HAL_RCC_ClockConfig+0x278>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	2380      	movs	r3, #128	; 0x80
 8001a1c:	029b      	lsls	r3, r3, #10
 8001a1e:	4013      	ands	r3, r2
 8001a20:	d120      	bne.n	8001a64 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e0e2      	b.n	8001bec <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b03      	cmp	r3, #3
 8001a2c:	d107      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a2e:	4b73      	ldr	r3, [pc, #460]	; (8001bfc <HAL_RCC_ClockConfig+0x278>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	2380      	movs	r3, #128	; 0x80
 8001a34:	049b      	lsls	r3, r3, #18
 8001a36:	4013      	ands	r3, r2
 8001a38:	d114      	bne.n	8001a64 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e0d6      	b.n	8001bec <HAL_RCC_ClockConfig+0x268>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d106      	bne.n	8001a54 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a46:	4b6d      	ldr	r3, [pc, #436]	; (8001bfc <HAL_RCC_ClockConfig+0x278>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2204      	movs	r2, #4
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d109      	bne.n	8001a64 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e0cb      	b.n	8001bec <HAL_RCC_ClockConfig+0x268>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a54:	4b69      	ldr	r3, [pc, #420]	; (8001bfc <HAL_RCC_ClockConfig+0x278>)
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	2380      	movs	r3, #128	; 0x80
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	d101      	bne.n	8001a64 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e0c3      	b.n	8001bec <HAL_RCC_ClockConfig+0x268>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a64:	4b65      	ldr	r3, [pc, #404]	; (8001bfc <HAL_RCC_ClockConfig+0x278>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	2203      	movs	r2, #3
 8001a6a:	4393      	bics	r3, r2
 8001a6c:	0019      	movs	r1, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	4b62      	ldr	r3, [pc, #392]	; (8001bfc <HAL_RCC_ClockConfig+0x278>)
 8001a74:	430a      	orrs	r2, r1
 8001a76:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a78:	f7ff f902 	bl	8000c80 <HAL_GetTick>
 8001a7c:	0003      	movs	r3, r0
 8001a7e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d111      	bne.n	8001aac <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a88:	e009      	b.n	8001a9e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a8a:	f7ff f8f9 	bl	8000c80 <HAL_GetTick>
 8001a8e:	0002      	movs	r2, r0
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	4a58      	ldr	r2, [pc, #352]	; (8001bf8 <HAL_RCC_ClockConfig+0x274>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e0a6      	b.n	8001bec <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a9e:	4b57      	ldr	r3, [pc, #348]	; (8001bfc <HAL_RCC_ClockConfig+0x278>)
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	220c      	movs	r2, #12
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	2b08      	cmp	r3, #8
 8001aa8:	d1ef      	bne.n	8001a8a <HAL_RCC_ClockConfig+0x106>
 8001aaa:	e03a      	b.n	8001b22 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2b03      	cmp	r3, #3
 8001ab2:	d111      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ab4:	e009      	b.n	8001aca <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab6:	f7ff f8e3 	bl	8000c80 <HAL_GetTick>
 8001aba:	0002      	movs	r2, r0
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	4a4d      	ldr	r2, [pc, #308]	; (8001bf8 <HAL_RCC_ClockConfig+0x274>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e090      	b.n	8001bec <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aca:	4b4c      	ldr	r3, [pc, #304]	; (8001bfc <HAL_RCC_ClockConfig+0x278>)
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	220c      	movs	r2, #12
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	2b0c      	cmp	r3, #12
 8001ad4:	d1ef      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0x132>
 8001ad6:	e024      	b.n	8001b22 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d11b      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ae0:	e009      	b.n	8001af6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae2:	f7ff f8cd 	bl	8000c80 <HAL_GetTick>
 8001ae6:	0002      	movs	r2, r0
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	4a42      	ldr	r2, [pc, #264]	; (8001bf8 <HAL_RCC_ClockConfig+0x274>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e07a      	b.n	8001bec <HAL_RCC_ClockConfig+0x268>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001af6:	4b41      	ldr	r3, [pc, #260]	; (8001bfc <HAL_RCC_ClockConfig+0x278>)
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	220c      	movs	r2, #12
 8001afc:	4013      	ands	r3, r2
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	d1ef      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0x15e>
 8001b02:	e00e      	b.n	8001b22 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b04:	f7ff f8bc 	bl	8000c80 <HAL_GetTick>
 8001b08:	0002      	movs	r2, r0
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	4a3a      	ldr	r2, [pc, #232]	; (8001bf8 <HAL_RCC_ClockConfig+0x274>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e069      	b.n	8001bec <HAL_RCC_ClockConfig+0x268>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001b18:	4b38      	ldr	r3, [pc, #224]	; (8001bfc <HAL_RCC_ClockConfig+0x278>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	220c      	movs	r2, #12
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d1f0      	bne.n	8001b04 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b22:	4b34      	ldr	r3, [pc, #208]	; (8001bf4 <HAL_RCC_ClockConfig+0x270>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2201      	movs	r2, #1
 8001b28:	4013      	ands	r3, r2
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d21e      	bcs.n	8001b6e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b30:	4b30      	ldr	r3, [pc, #192]	; (8001bf4 <HAL_RCC_ClockConfig+0x270>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2201      	movs	r2, #1
 8001b36:	4393      	bics	r3, r2
 8001b38:	0019      	movs	r1, r3
 8001b3a:	4b2e      	ldr	r3, [pc, #184]	; (8001bf4 <HAL_RCC_ClockConfig+0x270>)
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b42:	f7ff f89d 	bl	8000c80 <HAL_GetTick>
 8001b46:	0003      	movs	r3, r0
 8001b48:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4a:	e009      	b.n	8001b60 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b4c:	f7ff f898 	bl	8000c80 <HAL_GetTick>
 8001b50:	0002      	movs	r2, r0
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	4a28      	ldr	r2, [pc, #160]	; (8001bf8 <HAL_RCC_ClockConfig+0x274>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e045      	b.n	8001bec <HAL_RCC_ClockConfig+0x268>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b60:	4b24      	ldr	r3, [pc, #144]	; (8001bf4 <HAL_RCC_ClockConfig+0x270>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2201      	movs	r2, #1
 8001b66:	4013      	ands	r3, r2
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d1ee      	bne.n	8001b4c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2204      	movs	r2, #4
 8001b74:	4013      	ands	r3, r2
 8001b76:	d009      	beq.n	8001b8c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b78:	4b20      	ldr	r3, [pc, #128]	; (8001bfc <HAL_RCC_ClockConfig+0x278>)
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	4a20      	ldr	r2, [pc, #128]	; (8001c00 <HAL_RCC_ClockConfig+0x27c>)
 8001b7e:	4013      	ands	r3, r2
 8001b80:	0019      	movs	r1, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68da      	ldr	r2, [r3, #12]
 8001b86:	4b1d      	ldr	r3, [pc, #116]	; (8001bfc <HAL_RCC_ClockConfig+0x278>)
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2208      	movs	r2, #8
 8001b92:	4013      	ands	r3, r2
 8001b94:	d00a      	beq.n	8001bac <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b96:	4b19      	ldr	r3, [pc, #100]	; (8001bfc <HAL_RCC_ClockConfig+0x278>)
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	4a1a      	ldr	r2, [pc, #104]	; (8001c04 <HAL_RCC_ClockConfig+0x280>)
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	0019      	movs	r1, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	691b      	ldr	r3, [r3, #16]
 8001ba4:	00da      	lsls	r2, r3, #3
 8001ba6:	4b15      	ldr	r3, [pc, #84]	; (8001bfc <HAL_RCC_ClockConfig+0x278>)
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bac:	f000 f832 	bl	8001c14 <HAL_RCC_GetSysClockFreq>
 8001bb0:	0001      	movs	r1, r0
 8001bb2:	4b12      	ldr	r3, [pc, #72]	; (8001bfc <HAL_RCC_ClockConfig+0x278>)
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	091b      	lsrs	r3, r3, #4
 8001bb8:	220f      	movs	r2, #15
 8001bba:	4013      	ands	r3, r2
 8001bbc:	4a12      	ldr	r2, [pc, #72]	; (8001c08 <HAL_RCC_ClockConfig+0x284>)
 8001bbe:	5cd3      	ldrb	r3, [r2, r3]
 8001bc0:	000a      	movs	r2, r1
 8001bc2:	40da      	lsrs	r2, r3
 8001bc4:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <HAL_RCC_ClockConfig+0x288>)
 8001bc6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001bc8:	4b11      	ldr	r3, [pc, #68]	; (8001c10 <HAL_RCC_ClockConfig+0x28c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	250b      	movs	r5, #11
 8001bce:	197c      	adds	r4, r7, r5
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	f7ff f80f 	bl	8000bf4 <HAL_InitTick>
 8001bd6:	0003      	movs	r3, r0
 8001bd8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001bda:	197b      	adds	r3, r7, r5
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_RCC_ClockConfig+0x266>
  {
    return status;
 8001be2:	230b      	movs	r3, #11
 8001be4:	18fb      	adds	r3, r7, r3
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	e000      	b.n	8001bec <HAL_RCC_ClockConfig+0x268>
  }

  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
}
 8001bec:	0018      	movs	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	b004      	add	sp, #16
 8001bf2:	bdb0      	pop	{r4, r5, r7, pc}
 8001bf4:	40022000 	.word	0x40022000
 8001bf8:	00001388 	.word	0x00001388
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	fffff8ff 	.word	0xfffff8ff
 8001c04:	ffffc7ff 	.word	0xffffc7ff
 8001c08:	080026a4 	.word	0x080026a4
 8001c0c:	20000000 	.word	0x20000000
 8001c10:	20000004 	.word	0x20000004

08001c14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c16:	b08f      	sub	sp, #60	; 0x3c
 8001c18:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001c1a:	4b4a      	ldr	r3, [pc, #296]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x130>)
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c22:	230c      	movs	r3, #12
 8001c24:	4013      	ands	r3, r2
 8001c26:	2b08      	cmp	r3, #8
 8001c28:	d00f      	beq.n	8001c4a <HAL_RCC_GetSysClockFreq+0x36>
 8001c2a:	2b0c      	cmp	r3, #12
 8001c2c:	d010      	beq.n	8001c50 <HAL_RCC_GetSysClockFreq+0x3c>
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	d000      	beq.n	8001c34 <HAL_RCC_GetSysClockFreq+0x20>
 8001c32:	e073      	b.n	8001d1c <HAL_RCC_GetSysClockFreq+0x108>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001c34:	4b43      	ldr	r3, [pc, #268]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x130>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2210      	movs	r2, #16
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	d002      	beq.n	8001c44 <HAL_RCC_GetSysClockFreq+0x30>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001c3e:	4b42      	ldr	r3, [pc, #264]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x134>)
 8001c40:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001c42:	e079      	b.n	8001d38 <HAL_RCC_GetSysClockFreq+0x124>
        sysclockfreq =  HSI_VALUE;
 8001c44:	4b41      	ldr	r3, [pc, #260]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x138>)
 8001c46:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c48:	e076      	b.n	8001d38 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c4a:	4b41      	ldr	r3, [pc, #260]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001c4c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c4e:	e073      	b.n	8001d38 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c52:	0c9a      	lsrs	r2, r3, #18
 8001c54:	230f      	movs	r3, #15
 8001c56:	401a      	ands	r2, r3
 8001c58:	4b3e      	ldr	r3, [pc, #248]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x140>)
 8001c5a:	5c9b      	ldrb	r3, [r3, r2]
 8001c5c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c60:	0d9a      	lsrs	r2, r3, #22
 8001c62:	2303      	movs	r3, #3
 8001c64:	4013      	ands	r3, r2
 8001c66:	3301      	adds	r3, #1
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c6a:	4b36      	ldr	r3, [pc, #216]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x130>)
 8001c6c:	68da      	ldr	r2, [r3, #12]
 8001c6e:	2380      	movs	r3, #128	; 0x80
 8001c70:	025b      	lsls	r3, r3, #9
 8001c72:	4013      	ands	r3, r2
 8001c74:	d019      	beq.n	8001caa <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c78:	61bb      	str	r3, [r7, #24]
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61fb      	str	r3, [r7, #28]
 8001c7e:	4a34      	ldr	r2, [pc, #208]	; (8001d50 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001c80:	2300      	movs	r3, #0
 8001c82:	69b8      	ldr	r0, [r7, #24]
 8001c84:	69f9      	ldr	r1, [r7, #28]
 8001c86:	f7fe faeb 	bl	8000260 <__aeabi_lmul>
 8001c8a:	0003      	movs	r3, r0
 8001c8c:	000c      	movs	r4, r1
 8001c8e:	0018      	movs	r0, r3
 8001c90:	0021      	movs	r1, r4
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	f7fe fabf 	bl	8000220 <__aeabi_uldivmod>
 8001ca2:	0003      	movs	r3, r0
 8001ca4:	000c      	movs	r4, r1
 8001ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8001ca8:	e035      	b.n	8001d16 <HAL_RCC_GetSysClockFreq+0x102>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001caa:	4b26      	ldr	r3, [pc, #152]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x130>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2210      	movs	r2, #16
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d019      	beq.n	8001ce8 <HAL_RCC_GetSysClockFreq+0xd4>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb6:	60bb      	str	r3, [r7, #8]
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	4a22      	ldr	r2, [pc, #136]	; (8001d48 <HAL_RCC_GetSysClockFreq+0x134>)
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	68b8      	ldr	r0, [r7, #8]
 8001cc2:	68f9      	ldr	r1, [r7, #12]
 8001cc4:	f7fe facc 	bl	8000260 <__aeabi_lmul>
 8001cc8:	0003      	movs	r3, r0
 8001cca:	000c      	movs	r4, r1
 8001ccc:	0018      	movs	r0, r3
 8001cce:	0021      	movs	r1, r4
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd2:	603b      	str	r3, [r7, #0]
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	607b      	str	r3, [r7, #4]
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f7fe faa0 	bl	8000220 <__aeabi_uldivmod>
 8001ce0:	0003      	movs	r3, r0
 8001ce2:	000c      	movs	r4, r1
 8001ce4:	637b      	str	r3, [r7, #52]	; 0x34
 8001ce6:	e016      	b.n	8001d16 <HAL_RCC_GetSysClockFreq+0x102>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cea:	0018      	movs	r0, r3
 8001cec:	2300      	movs	r3, #0
 8001cee:	0019      	movs	r1, r3
 8001cf0:	4a16      	ldr	r2, [pc, #88]	; (8001d4c <HAL_RCC_GetSysClockFreq+0x138>)
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f7fe fab4 	bl	8000260 <__aeabi_lmul>
 8001cf8:	0003      	movs	r3, r0
 8001cfa:	000c      	movs	r4, r1
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	0021      	movs	r1, r4
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	001d      	movs	r5, r3
 8001d04:	2300      	movs	r3, #0
 8001d06:	001e      	movs	r6, r3
 8001d08:	002a      	movs	r2, r5
 8001d0a:	0033      	movs	r3, r6
 8001d0c:	f7fe fa88 	bl	8000220 <__aeabi_uldivmod>
 8001d10:	0003      	movs	r3, r0
 8001d12:	000c      	movs	r4, r1
 8001d14:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d18:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d1a:	e00d      	b.n	8001d38 <HAL_RCC_GetSysClockFreq+0x124>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001d1c:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <HAL_RCC_GetSysClockFreq+0x130>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	0b5b      	lsrs	r3, r3, #13
 8001d22:	2207      	movs	r2, #7
 8001d24:	4013      	ands	r3, r2
 8001d26:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001d28:	6a3b      	ldr	r3, [r7, #32]
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	2280      	movs	r2, #128	; 0x80
 8001d2e:	0212      	lsls	r2, r2, #8
 8001d30:	409a      	lsls	r2, r3
 8001d32:	0013      	movs	r3, r2
 8001d34:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d36:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	b00f      	add	sp, #60	; 0x3c
 8001d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d42:	46c0      	nop			; (mov r8, r8)
 8001d44:	40021000 	.word	0x40021000
 8001d48:	003d0900 	.word	0x003d0900
 8001d4c:	00f42400 	.word	0x00f42400
 8001d50:	007a1200 	.word	0x007a1200
 8001d54:	080026b4 	.word	0x080026b4

08001d58 <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != (void *)NULL);

  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI  \
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	221f      	movs	r2, #31
 8001d64:	601a      	str	r2, [r3, #0]
                  | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_MSI;
#if defined(RCC_HSI48_SUPPORT)
  RCC_OscInitStruct->OscillatorType |= RCC_OSCILLATORTYPE_HSI48;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2220      	movs	r2, #32
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	601a      	str	r2, [r3, #0]
#endif /* RCC_HSI48_SUPPORT */


  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8001d72:	4b58      	ldr	r3, [pc, #352]	; (8001ed4 <HAL_RCC_GetOscConfig+0x17c>)
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	2380      	movs	r3, #128	; 0x80
 8001d78:	02db      	lsls	r3, r3, #11
 8001d7a:	401a      	ands	r2, r3
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	02db      	lsls	r3, r3, #11
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d104      	bne.n	8001d8e <HAL_RCC_GetOscConfig+0x36>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	22a0      	movs	r2, #160	; 0xa0
 8001d88:	02d2      	lsls	r2, r2, #11
 8001d8a:	605a      	str	r2, [r3, #4]
 8001d8c:	e010      	b.n	8001db0 <HAL_RCC_GetOscConfig+0x58>
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 8001d8e:	4b51      	ldr	r3, [pc, #324]	; (8001ed4 <HAL_RCC_GetOscConfig+0x17c>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	2380      	movs	r3, #128	; 0x80
 8001d94:	025b      	lsls	r3, r3, #9
 8001d96:	401a      	ands	r2, r3
 8001d98:	2380      	movs	r3, #128	; 0x80
 8001d9a:	025b      	lsls	r3, r3, #9
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d104      	bne.n	8001daa <HAL_RCC_GetOscConfig+0x52>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2280      	movs	r2, #128	; 0x80
 8001da4:	0252      	lsls	r2, r2, #9
 8001da6:	605a      	str	r2, [r3, #4]
 8001da8:	e002      	b.n	8001db0 <HAL_RCC_GetOscConfig+0x58>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	605a      	str	r2, [r3, #4]
  }

  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 8001db0:	4b48      	ldr	r3, [pc, #288]	; (8001ed4 <HAL_RCC_GetOscConfig+0x17c>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2201      	movs	r2, #1
 8001db6:	4013      	ands	r3, r2
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d103      	bne.n	8001dc4 <HAL_RCC_GetOscConfig+0x6c>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	e002      	b.n	8001dca <HAL_RCC_GetOscConfig+0x72>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	60da      	str	r2, [r3, #12]
  }

  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->ICSCR & RCC_ICSCR_HSITRIM) >> 8);
 8001dca:	4b42      	ldr	r3, [pc, #264]	; (8001ed4 <HAL_RCC_GetOscConfig+0x17c>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	0a1b      	lsrs	r3, r3, #8
 8001dd0:	221f      	movs	r2, #31
 8001dd2:	401a      	ands	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	611a      	str	r2, [r3, #16]

  /* Get the MSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_MSION) == RCC_CR_MSION)
 8001dd8:	4b3e      	ldr	r3, [pc, #248]	; (8001ed4 <HAL_RCC_GetOscConfig+0x17c>)
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	2380      	movs	r3, #128	; 0x80
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	401a      	ands	r2, r3
 8001de2:	2380      	movs	r3, #128	; 0x80
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d103      	bne.n	8001df2 <HAL_RCC_GetOscConfig+0x9a>
  {
    RCC_OscInitStruct->MSIState = RCC_MSI_ON;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	61da      	str	r2, [r3, #28]
 8001df0:	e002      	b.n	8001df8 <HAL_RCC_GetOscConfig+0xa0>
  }
  else
  {
    RCC_OscInitStruct->MSIState = RCC_MSI_OFF;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	61da      	str	r2, [r3, #28]
  }

  RCC_OscInitStruct->MSICalibrationValue = (uint32_t)((RCC->ICSCR & RCC_ICSCR_MSITRIM) >> RCC_ICSCR_MSITRIM_Pos);
 8001df8:	4b36      	ldr	r3, [pc, #216]	; (8001ed4 <HAL_RCC_GetOscConfig+0x17c>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	0e1b      	lsrs	r3, r3, #24
 8001dfe:	22ff      	movs	r2, #255	; 0xff
 8001e00:	401a      	ands	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct->MSIClockRange = (uint32_t)((RCC->ICSCR & RCC_ICSCR_MSIRANGE));
 8001e06:	4b33      	ldr	r3, [pc, #204]	; (8001ed4 <HAL_RCC_GetOscConfig+0x17c>)
 8001e08:	685a      	ldr	r2, [r3, #4]
 8001e0a:	23e0      	movs	r3, #224	; 0xe0
 8001e0c:	021b      	lsls	r3, r3, #8
 8001e0e:	401a      	ands	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSEBYP) == RCC_CSR_LSEBYP)
 8001e14:	4b2f      	ldr	r3, [pc, #188]	; (8001ed4 <HAL_RCC_GetOscConfig+0x17c>)
 8001e16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e18:	2380      	movs	r3, #128	; 0x80
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	401a      	ands	r2, r3
 8001e1e:	2380      	movs	r3, #128	; 0x80
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d104      	bne.n	8001e30 <HAL_RCC_GetOscConfig+0xd8>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	22a0      	movs	r2, #160	; 0xa0
 8001e2a:	00d2      	lsls	r2, r2, #3
 8001e2c:	609a      	str	r2, [r3, #8]
 8001e2e:	e010      	b.n	8001e52 <HAL_RCC_GetOscConfig+0xfa>
  }
  else if((RCC->CSR &RCC_CSR_LSEON) == RCC_CSR_LSEON)
 8001e30:	4b28      	ldr	r3, [pc, #160]	; (8001ed4 <HAL_RCC_GetOscConfig+0x17c>)
 8001e32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e34:	2380      	movs	r3, #128	; 0x80
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	401a      	ands	r2, r3
 8001e3a:	2380      	movs	r3, #128	; 0x80
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d104      	bne.n	8001e4c <HAL_RCC_GetOscConfig+0xf4>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2280      	movs	r2, #128	; 0x80
 8001e46:	0052      	lsls	r2, r2, #1
 8001e48:	609a      	str	r2, [r3, #8]
 8001e4a:	e002      	b.n	8001e52 <HAL_RCC_GetOscConfig+0xfa>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	609a      	str	r2, [r3, #8]
  }

  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 8001e52:	4b20      	ldr	r3, [pc, #128]	; (8001ed4 <HAL_RCC_GetOscConfig+0x17c>)
 8001e54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e56:	2201      	movs	r2, #1
 8001e58:	4013      	ands	r3, r2
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d103      	bne.n	8001e66 <HAL_RCC_GetOscConfig+0x10e>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	615a      	str	r2, [r3, #20]
 8001e64:	e002      	b.n	8001e6c <HAL_RCC_GetOscConfig+0x114>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	615a      	str	r2, [r3, #20]
  }

#if defined(RCC_HSI48_SUPPORT)
  /* Get the HSI48 configuration if any-----------------------------------------*/
  RCC_OscInitStruct->HSI48State = __HAL_RCC_GET_HSI48_STATE();
 8001e6c:	4b19      	ldr	r3, [pc, #100]	; (8001ed4 <HAL_RCC_GetOscConfig+0x17c>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	2201      	movs	r2, #1
 8001e72:	4013      	ands	r3, r2
 8001e74:	1e5a      	subs	r2, r3, #1
 8001e76:	4193      	sbcs	r3, r2
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	001a      	movs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	619a      	str	r2, [r3, #24]
#endif /* RCC_HSI48_SUPPORT */

  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 8001e80:	4b14      	ldr	r3, [pc, #80]	; (8001ed4 <HAL_RCC_GetOscConfig+0x17c>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	2380      	movs	r3, #128	; 0x80
 8001e86:	045b      	lsls	r3, r3, #17
 8001e88:	401a      	ands	r2, r3
 8001e8a:	2380      	movs	r3, #128	; 0x80
 8001e8c:	045b      	lsls	r3, r3, #17
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d103      	bne.n	8001e9a <HAL_RCC_GetOscConfig+0x142>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2202      	movs	r2, #2
 8001e96:	629a      	str	r2, [r3, #40]	; 0x28
 8001e98:	e002      	b.n	8001ea0 <HAL_RCC_GetOscConfig+0x148>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLSRC);
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <HAL_RCC_GetOscConfig+0x17c>)
 8001ea2:	68da      	ldr	r2, [r3, #12]
 8001ea4:	2380      	movs	r3, #128	; 0x80
 8001ea6:	025b      	lsls	r3, r3, #9
 8001ea8:	401a      	ands	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct->PLL.PLLMUL = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLMUL);
 8001eae:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <HAL_RCC_GetOscConfig+0x17c>)
 8001eb0:	68da      	ldr	r2, [r3, #12]
 8001eb2:	23f0      	movs	r3, #240	; 0xf0
 8001eb4:	039b      	lsls	r3, r3, #14
 8001eb6:	401a      	ands	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct->PLL.PLLDIV = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLDIV);
 8001ebc:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <HAL_RCC_GetOscConfig+0x17c>)
 8001ebe:	68da      	ldr	r2, [r3, #12]
 8001ec0:	23c0      	movs	r3, #192	; 0xc0
 8001ec2:	041b      	lsls	r3, r3, #16
 8001ec4:	401a      	ands	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	b002      	add	sp, #8
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	46c0      	nop			; (mov r8, r8)
 8001ed4:	40021000 	.word	0x40021000

08001ed8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	220f      	movs	r2, #15
 8001ee6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ee8:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <HAL_RCC_GetClockConfig+0x5c>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	2203      	movs	r2, #3
 8001eee:	401a      	ands	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ef4:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <HAL_RCC_GetClockConfig+0x5c>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	22f0      	movs	r2, #240	; 0xf0
 8001efa:	401a      	ands	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f00:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <HAL_RCC_GetClockConfig+0x5c>)
 8001f02:	68da      	ldr	r2, [r3, #12]
 8001f04:	23e0      	movs	r3, #224	; 0xe0
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	401a      	ands	r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001f0e:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <HAL_RCC_GetClockConfig+0x5c>)
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	08da      	lsrs	r2, r3, #3
 8001f14:	23e0      	movs	r3, #224	; 0xe0
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	401a      	ands	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001f1e:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <HAL_RCC_GetClockConfig+0x60>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2201      	movs	r2, #1
 8001f24:	401a      	ands	r2, r3
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	601a      	str	r2, [r3, #0]
}
 8001f2a:	46c0      	nop			; (mov r8, r8)
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	b002      	add	sp, #8
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	46c0      	nop			; (mov r8, r8)
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40022000 	.word	0x40022000

08001f3c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001f44:	2317      	movs	r3, #23
 8001f46:	18fb      	adds	r3, r7, r3
 8001f48:	2200      	movs	r2, #0
 8001f4a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2220      	movs	r2, #32
 8001f52:	4013      	ands	r3, r2
 8001f54:	d106      	bne.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	2380      	movs	r3, #128	; 0x80
 8001f5c:	011b      	lsls	r3, r3, #4
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d100      	bne.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8001f62:	e0d9      	b.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f64:	4b9c      	ldr	r3, [pc, #624]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001f66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f68:	2380      	movs	r3, #128	; 0x80
 8001f6a:	055b      	lsls	r3, r3, #21
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	d10a      	bne.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f70:	4b99      	ldr	r3, [pc, #612]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001f72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f74:	4b98      	ldr	r3, [pc, #608]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001f76:	2180      	movs	r1, #128	; 0x80
 8001f78:	0549      	lsls	r1, r1, #21
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001f7e:	2317      	movs	r3, #23
 8001f80:	18fb      	adds	r3, r7, r3
 8001f82:	2201      	movs	r2, #1
 8001f84:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f86:	4b95      	ldr	r3, [pc, #596]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	2380      	movs	r3, #128	; 0x80
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d11a      	bne.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f92:	4b92      	ldr	r3, [pc, #584]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	4b91      	ldr	r3, [pc, #580]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001f98:	2180      	movs	r1, #128	; 0x80
 8001f9a:	0049      	lsls	r1, r1, #1
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fa0:	f7fe fe6e 	bl	8000c80 <HAL_GetTick>
 8001fa4:	0003      	movs	r3, r0
 8001fa6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa8:	e008      	b.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001faa:	f7fe fe69 	bl	8000c80 <HAL_GetTick>
 8001fae:	0002      	movs	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	2b64      	cmp	r3, #100	; 0x64
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e108      	b.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x292>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fbc:	4b87      	ldr	r3, [pc, #540]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	2380      	movs	r3, #128	; 0x80
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d0f0      	beq.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001fc8:	4b83      	ldr	r3, [pc, #524]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	23c0      	movs	r3, #192	; 0xc0
 8001fce:	039b      	lsls	r3, r3, #14
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	685a      	ldr	r2, [r3, #4]
 8001fd8:	23c0      	movs	r3, #192	; 0xc0
 8001fda:	039b      	lsls	r3, r3, #14
 8001fdc:	4013      	ands	r3, r2
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d107      	bne.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	23c0      	movs	r3, #192	; 0xc0
 8001fea:	039b      	lsls	r3, r3, #14
 8001fec:	4013      	ands	r3, r2
 8001fee:	68fa      	ldr	r2, [r7, #12]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d013      	beq.n	800201c <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	23c0      	movs	r3, #192	; 0xc0
 8001ffa:	029b      	lsls	r3, r3, #10
 8001ffc:	401a      	ands	r2, r3
 8001ffe:	23c0      	movs	r3, #192	; 0xc0
 8002000:	029b      	lsls	r3, r3, #10
 8002002:	429a      	cmp	r2, r3
 8002004:	d10a      	bne.n	800201c <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002006:	4b74      	ldr	r3, [pc, #464]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	2380      	movs	r3, #128	; 0x80
 800200c:	029b      	lsls	r3, r3, #10
 800200e:	401a      	ands	r2, r3
 8002010:	2380      	movs	r3, #128	; 0x80
 8002012:	029b      	lsls	r3, r3, #10
 8002014:	429a      	cmp	r2, r3
 8002016:	d101      	bne.n	800201c <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e0d8      	b.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x292>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800201c:	4b6e      	ldr	r3, [pc, #440]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800201e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002020:	23c0      	movs	r3, #192	; 0xc0
 8002022:	029b      	lsls	r3, r3, #10
 8002024:	4013      	ands	r3, r2
 8002026:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d049      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x186>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685a      	ldr	r2, [r3, #4]
 8002032:	23c0      	movs	r3, #192	; 0xc0
 8002034:	029b      	lsls	r3, r3, #10
 8002036:	4013      	ands	r3, r2
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	429a      	cmp	r2, r3
 800203c:	d004      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2220      	movs	r2, #32
 8002044:	4013      	ands	r3, r2
 8002046:	d10d      	bne.n	8002064 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	23c0      	movs	r3, #192	; 0xc0
 800204e:	029b      	lsls	r3, r3, #10
 8002050:	4013      	ands	r3, r2
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	429a      	cmp	r2, r3
 8002056:	d034      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	2380      	movs	r3, #128	; 0x80
 800205e:	011b      	lsls	r3, r3, #4
 8002060:	4013      	ands	r3, r2
 8002062:	d02e      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002064:	4b5c      	ldr	r3, [pc, #368]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002066:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002068:	4a5d      	ldr	r2, [pc, #372]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800206a:	4013      	ands	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800206e:	4b5a      	ldr	r3, [pc, #360]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002070:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002072:	4b59      	ldr	r3, [pc, #356]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002074:	2180      	movs	r1, #128	; 0x80
 8002076:	0309      	lsls	r1, r1, #12
 8002078:	430a      	orrs	r2, r1
 800207a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800207c:	4b56      	ldr	r3, [pc, #344]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800207e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002080:	4b55      	ldr	r3, [pc, #340]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002082:	4958      	ldr	r1, [pc, #352]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8002084:	400a      	ands	r2, r1
 8002086:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002088:	4b53      	ldr	r3, [pc, #332]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	2380      	movs	r3, #128	; 0x80
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	4013      	ands	r3, r2
 8002096:	d014      	beq.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002098:	f7fe fdf2 	bl	8000c80 <HAL_GetTick>
 800209c:	0003      	movs	r3, r0
 800209e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020a0:	e009      	b.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020a2:	f7fe fded 	bl	8000c80 <HAL_GetTick>
 80020a6:	0002      	movs	r2, r0
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	1ad3      	subs	r3, r2, r3
 80020ac:	4a4e      	ldr	r2, [pc, #312]	; (80021e8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e08b      	b.n	80021ce <HAL_RCCEx_PeriphCLKConfig+0x292>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020b6:	4b48      	ldr	r3, [pc, #288]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80020b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020ba:	2380      	movs	r3, #128	; 0x80
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4013      	ands	r3, r2
 80020c0:	d0ef      	beq.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	23c0      	movs	r3, #192	; 0xc0
 80020c8:	029b      	lsls	r3, r3, #10
 80020ca:	401a      	ands	r2, r3
 80020cc:	23c0      	movs	r3, #192	; 0xc0
 80020ce:	029b      	lsls	r3, r3, #10
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d10c      	bne.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 80020d4:	4b40      	ldr	r3, [pc, #256]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a44      	ldr	r2, [pc, #272]	; (80021ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80020da:	4013      	ands	r3, r2
 80020dc:	0019      	movs	r1, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685a      	ldr	r2, [r3, #4]
 80020e2:	23c0      	movs	r3, #192	; 0xc0
 80020e4:	039b      	lsls	r3, r3, #14
 80020e6:	401a      	ands	r2, r3
 80020e8:	4b3b      	ldr	r3, [pc, #236]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80020ea:	430a      	orrs	r2, r1
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	4b3a      	ldr	r3, [pc, #232]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80020f0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	23c0      	movs	r3, #192	; 0xc0
 80020f8:	029b      	lsls	r3, r3, #10
 80020fa:	401a      	ands	r2, r3
 80020fc:	4b36      	ldr	r3, [pc, #216]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80020fe:	430a      	orrs	r2, r1
 8002100:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002102:	2317      	movs	r3, #23
 8002104:	18fb      	adds	r3, r7, r3
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d105      	bne.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800210c:	4b32      	ldr	r3, [pc, #200]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800210e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002110:	4b31      	ldr	r3, [pc, #196]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002112:	4937      	ldr	r1, [pc, #220]	; (80021f0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 8002114:	400a      	ands	r2, r1
 8002116:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2201      	movs	r2, #1
 800211e:	4013      	ands	r3, r2
 8002120:	d009      	beq.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002122:	4b2d      	ldr	r3, [pc, #180]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002126:	2203      	movs	r2, #3
 8002128:	4393      	bics	r3, r2
 800212a:	0019      	movs	r1, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68da      	ldr	r2, [r3, #12]
 8002130:	4b29      	ldr	r3, [pc, #164]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002132:	430a      	orrs	r2, r1
 8002134:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2202      	movs	r2, #2
 800213c:	4013      	ands	r3, r2
 800213e:	d009      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002140:	4b25      	ldr	r3, [pc, #148]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002144:	220c      	movs	r2, #12
 8002146:	4393      	bics	r3, r2
 8002148:	0019      	movs	r1, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	691a      	ldr	r2, [r3, #16]
 800214e:	4b22      	ldr	r3, [pc, #136]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002150:	430a      	orrs	r2, r1
 8002152:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2204      	movs	r2, #4
 800215a:	4013      	ands	r3, r2
 800215c:	d009      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800215e:	4b1e      	ldr	r3, [pc, #120]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8002160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002162:	4a24      	ldr	r2, [pc, #144]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>)
 8002164:	4013      	ands	r3, r2
 8002166:	0019      	movs	r1, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	695a      	ldr	r2, [r3, #20]
 800216c:	4b1a      	ldr	r3, [pc, #104]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800216e:	430a      	orrs	r2, r1
 8002170:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2208      	movs	r2, #8
 8002178:	4013      	ands	r3, r2
 800217a:	d009      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800217c:	4b16      	ldr	r3, [pc, #88]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800217e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002180:	4a1d      	ldr	r2, [pc, #116]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>)
 8002182:	4013      	ands	r3, r2
 8002184:	0019      	movs	r1, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	699a      	ldr	r2, [r3, #24]
 800218a:	4b13      	ldr	r3, [pc, #76]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800218c:	430a      	orrs	r2, r1
 800218e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2240      	movs	r2, #64	; 0x40
 8002196:	4013      	ands	r3, r2
 8002198:	d009      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800219a:	4b0f      	ldr	r3, [pc, #60]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800219c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800219e:	4a17      	ldr	r2, [pc, #92]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x2c0>)
 80021a0:	4013      	ands	r3, r2
 80021a2:	0019      	movs	r1, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a1a      	ldr	r2, [r3, #32]
 80021a8:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80021aa:	430a      	orrs	r2, r1
 80021ac:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2280      	movs	r2, #128	; 0x80
 80021b4:	4013      	ands	r3, r2
 80021b6:	d009      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x290>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80021b8:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80021ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021bc:	4a10      	ldr	r2, [pc, #64]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80021be:	4013      	ands	r3, r2
 80021c0:	0019      	movs	r1, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	69da      	ldr	r2, [r3, #28]
 80021c6:	4b04      	ldr	r3, [pc, #16]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 80021c8:	430a      	orrs	r2, r1
 80021ca:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	0018      	movs	r0, r3
 80021d0:	46bd      	mov	sp, r7
 80021d2:	b006      	add	sp, #24
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	46c0      	nop			; (mov r8, r8)
 80021d8:	40021000 	.word	0x40021000
 80021dc:	40007000 	.word	0x40007000
 80021e0:	fffcffff 	.word	0xfffcffff
 80021e4:	fff7ffff 	.word	0xfff7ffff
 80021e8:	00001388 	.word	0x00001388
 80021ec:	ffcfffff 	.word	0xffcfffff
 80021f0:	efffffff 	.word	0xefffffff
 80021f4:	fffff3ff 	.word	0xfffff3ff
 80021f8:	ffffcfff 	.word	0xffffcfff
 80021fc:	fbffffff 	.word	0xfbffffff
 8002200:	fff3ffff 	.word	0xfff3ffff

08002204 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e08e      	b.n	8002334 <HAL_RTC_Init+0x130>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2221      	movs	r2, #33	; 0x21
 800221a:	5c9b      	ldrb	r3, [r3, r2]
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d107      	bne.n	8002232 <HAL_RTC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2220      	movs	r2, #32
 8002226:	2100      	movs	r1, #0
 8002228:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	0018      	movs	r0, r3
 800222e:	f7fe fc63 	bl	8000af8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2221      	movs	r2, #33	; 0x21
 8002236:	2102      	movs	r1, #2
 8002238:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	22ca      	movs	r2, #202	; 0xca
 8002240:	625a      	str	r2, [r3, #36]	; 0x24
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2253      	movs	r2, #83	; 0x53
 8002248:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	0018      	movs	r0, r3
 800224e:	f000 f89e 	bl	800238e <RTC_EnterInitMode>
 8002252:	1e03      	subs	r3, r0, #0
 8002254:	d009      	beq.n	800226a <HAL_RTC_Init+0x66>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	22ff      	movs	r2, #255	; 0xff
 800225c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2221      	movs	r2, #33	; 0x21
 8002262:	2104      	movs	r1, #4
 8002264:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e064      	b.n	8002334 <HAL_RTC_Init+0x130>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4931      	ldr	r1, [pc, #196]	; (800233c <HAL_RTC_Init+0x138>)
 8002276:	400a      	ands	r2, r1
 8002278:	609a      	str	r2, [r3, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6899      	ldr	r1, [r3, #8]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	431a      	orrs	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	431a      	orrs	r2, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	430a      	orrs	r2, r1
 8002296:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	68d2      	ldr	r2, [r2, #12]
 80022a0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6919      	ldr	r1, [r3, #16]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	041a      	lsls	r2, r3, #16
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68da      	ldr	r2, [r3, #12]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2180      	movs	r1, #128	; 0x80
 80022c2:	438a      	bics	r2, r1
 80022c4:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2103      	movs	r1, #3
 80022d2:	438a      	bics	r2, r1
 80022d4:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	69da      	ldr	r2, [r3, #28]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	695b      	ldr	r3, [r3, #20]
 80022e4:	431a      	orrs	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	64da      	str	r2, [r3, #76]	; 0x4c

    /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	2220      	movs	r2, #32
 80022f6:	4013      	ands	r3, r2
 80022f8:	d113      	bne.n	8002322 <HAL_RTC_Init+0x11e>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	0018      	movs	r0, r3
 80022fe:	f000 f81f 	bl	8002340 <HAL_RTC_WaitForSynchro>
 8002302:	1e03      	subs	r3, r0, #0
 8002304:	d00d      	beq.n	8002322 <HAL_RTC_Init+0x11e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	22ff      	movs	r2, #255	; 0xff
 800230c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2221      	movs	r2, #33	; 0x21
 8002312:	2104      	movs	r1, #4
 8002314:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2220      	movs	r2, #32
 800231a:	2100      	movs	r1, #0
 800231c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e008      	b.n	8002334 <HAL_RTC_Init+0x130>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	22ff      	movs	r2, #255	; 0xff
 8002328:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2221      	movs	r2, #33	; 0x21
 800232e:	2101      	movs	r1, #1
 8002330:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002332:	2300      	movs	r3, #0
  }
}
 8002334:	0018      	movs	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	b002      	add	sp, #8
 800233a:	bd80      	pop	{r7, pc}
 800233c:	ff8fffbf 	.word	0xff8fffbf

08002340 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	21a0      	movs	r1, #160	; 0xa0
 8002354:	438a      	bics	r2, r1
 8002356:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002358:	f7fe fc92 	bl	8000c80 <HAL_GetTick>
 800235c:	0003      	movs	r3, r0
 800235e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002360:	e00a      	b.n	8002378 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002362:	f7fe fc8d 	bl	8000c80 <HAL_GetTick>
 8002366:	0002      	movs	r2, r0
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	1ad2      	subs	r2, r2, r3
 800236c:	23fa      	movs	r3, #250	; 0xfa
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	429a      	cmp	r2, r3
 8002372:	d901      	bls.n	8002378 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e006      	b.n	8002386 <HAL_RTC_WaitForSynchro+0x46>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	2220      	movs	r2, #32
 8002380:	4013      	ands	r3, r2
 8002382:	d0ee      	beq.n	8002362 <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	0018      	movs	r0, r3
 8002388:	46bd      	mov	sp, r7
 800238a:	b004      	add	sp, #16
 800238c:	bd80      	pop	{r7, pc}

0800238e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b084      	sub	sp, #16
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	2240      	movs	r2, #64	; 0x40
 800239e:	4013      	ands	r3, r2
 80023a0:	d11a      	bne.n	80023d8 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2201      	movs	r2, #1
 80023a8:	4252      	negs	r2, r2
 80023aa:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80023ac:	f7fe fc68 	bl	8000c80 <HAL_GetTick>
 80023b0:	0003      	movs	r3, r0
 80023b2:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80023b4:	e00a      	b.n	80023cc <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80023b6:	f7fe fc63 	bl	8000c80 <HAL_GetTick>
 80023ba:	0002      	movs	r2, r0
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	1ad2      	subs	r2, r2, r3
 80023c0:	23fa      	movs	r3, #250	; 0xfa
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d901      	bls.n	80023cc <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e006      	b.n	80023da <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	2240      	movs	r2, #64	; 0x40
 80023d4:	4013      	ands	r3, r2
 80023d6:	d0ee      	beq.n	80023b6 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	0018      	movs	r0, r3
 80023dc:	46bd      	mov	sp, r7
 80023de:	b004      	add	sp, #16
 80023e0:	bd80      	pop	{r7, pc}
	...

080023e4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param  WakeUpCounter Wake up counter
  * @param  WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2220      	movs	r2, #32
 80023f4:	5c9b      	ldrb	r3, [r3, r2]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d101      	bne.n	80023fe <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80023fa:	2302      	movs	r3, #2
 80023fc:	e0ad      	b.n	800255a <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2220      	movs	r2, #32
 8002402:	2101      	movs	r1, #1
 8002404:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2221      	movs	r2, #33	; 0x21
 800240a:	2102      	movs	r1, #2
 800240c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	22ca      	movs	r2, #202	; 0xca
 8002414:	625a      	str	r2, [r3, #36]	; 0x24
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2253      	movs	r2, #83	; 0x53
 800241c:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	2380      	movs	r3, #128	; 0x80
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	4013      	ands	r3, r2
 800242a:	d021      	beq.n	8002470 <HAL_RTCEx_SetWakeUpTimer_IT+0x8c>
  {
    tickstart = HAL_GetTick();
 800242c:	f7fe fc28 	bl	8000c80 <HAL_GetTick>
 8002430:	0003      	movs	r3, r0
 8002432:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8002434:	e016      	b.n	8002464 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002436:	f7fe fc23 	bl	8000c80 <HAL_GetTick>
 800243a:	0002      	movs	r2, r0
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	1ad2      	subs	r2, r2, r3
 8002440:	23fa      	movs	r3, #250	; 0xfa
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	429a      	cmp	r2, r3
 8002446:	d90d      	bls.n	8002464 <HAL_RTCEx_SetWakeUpTimer_IT+0x80>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	22ff      	movs	r2, #255	; 0xff
 800244e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2221      	movs	r2, #33	; 0x21
 8002454:	2103      	movs	r1, #3
 8002456:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2220      	movs	r2, #32
 800245c:	2100      	movs	r1, #0
 800245e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e07a      	b.n	800255a <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	2204      	movs	r2, #4
 800246c:	4013      	ands	r3, r2
 800246e:	d1e2      	bne.n	8002436 <HAL_RTCEx_SetWakeUpTimer_IT+0x52>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	689a      	ldr	r2, [r3, #8]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	493a      	ldr	r1, [pc, #232]	; (8002564 <HAL_RTCEx_SetWakeUpTimer_IT+0x180>)
 800247c:	400a      	ands	r2, r1
 800247e:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	22ff      	movs	r2, #255	; 0xff
 8002488:	401a      	ands	r2, r3
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4936      	ldr	r1, [pc, #216]	; (8002568 <HAL_RTCEx_SetWakeUpTimer_IT+0x184>)
 8002490:	430a      	orrs	r2, r1
 8002492:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002494:	f7fe fbf4 	bl	8000c80 <HAL_GetTick>
 8002498:	0003      	movs	r3, r0
 800249a:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800249c:	e016      	b.n	80024cc <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800249e:	f7fe fbef 	bl	8000c80 <HAL_GetTick>
 80024a2:	0002      	movs	r2, r0
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	1ad2      	subs	r2, r2, r3
 80024a8:	23fa      	movs	r3, #250	; 0xfa
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d90d      	bls.n	80024cc <HAL_RTCEx_SetWakeUpTimer_IT+0xe8>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	22ff      	movs	r2, #255	; 0xff
 80024b6:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2221      	movs	r2, #33	; 0x21
 80024bc:	2103      	movs	r1, #3
 80024be:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2220      	movs	r2, #32
 80024c4:	2100      	movs	r1, #0
 80024c6:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e046      	b.n	800255a <HAL_RTCEx_SetWakeUpTimer_IT+0x176>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	2204      	movs	r2, #4
 80024d4:	4013      	ands	r3, r2
 80024d6:	d0e2      	beq.n	800249e <HAL_RTCEx_SetWakeUpTimer_IT+0xba>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68ba      	ldr	r2, [r7, #8]
 80024de:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2107      	movs	r1, #7
 80024ec:	438a      	bics	r2, r1
 80024ee:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6899      	ldr	r1, [r3, #8]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	430a      	orrs	r2, r1
 80024fe:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8002500:	4b1a      	ldr	r3, [pc, #104]	; (800256c <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	4b19      	ldr	r3, [pc, #100]	; (800256c <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8002506:	2180      	movs	r1, #128	; 0x80
 8002508:	0349      	lsls	r1, r1, #13
 800250a:	430a      	orrs	r2, r1
 800250c:	601a      	str	r2, [r3, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800250e:	4b17      	ldr	r3, [pc, #92]	; (800256c <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8002510:	689a      	ldr	r2, [r3, #8]
 8002512:	4b16      	ldr	r3, [pc, #88]	; (800256c <HAL_RTCEx_SetWakeUpTimer_IT+0x188>)
 8002514:	2180      	movs	r1, #128	; 0x80
 8002516:	0349      	lsls	r1, r1, #13
 8002518:	430a      	orrs	r2, r1
 800251a:	609a      	str	r2, [r3, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689a      	ldr	r2, [r3, #8]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2180      	movs	r1, #128	; 0x80
 8002528:	01c9      	lsls	r1, r1, #7
 800252a:	430a      	orrs	r2, r1
 800252c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2180      	movs	r1, #128	; 0x80
 800253a:	00c9      	lsls	r1, r1, #3
 800253c:	430a      	orrs	r2, r1
 800253e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	22ff      	movs	r2, #255	; 0xff
 8002546:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2221      	movs	r2, #33	; 0x21
 800254c:	2101      	movs	r1, #1
 800254e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2220      	movs	r2, #32
 8002554:	2100      	movs	r1, #0
 8002556:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	0018      	movs	r0, r3
 800255c:	46bd      	mov	sp, r7
 800255e:	b006      	add	sp, #24
 8002560:	bd80      	pop	{r7, pc}
 8002562:	46c0      	nop			; (mov r8, r8)
 8002564:	fffffbff 	.word	0xfffffbff
 8002568:	fffffb7f 	.word	0xfffffb7f
 800256c:	40010400 	.word	0x40010400

08002570 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2220      	movs	r2, #32
 800257c:	5c9b      	ldrb	r3, [r3, r2]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d101      	bne.n	8002586 <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 8002582:	2302      	movs	r3, #2
 8002584:	e04e      	b.n	8002624 <HAL_RTCEx_DeactivateWakeUpTimer+0xb4>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2220      	movs	r2, #32
 800258a:	2101      	movs	r1, #1
 800258c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2221      	movs	r2, #33	; 0x21
 8002592:	2102      	movs	r1, #2
 8002594:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	22ca      	movs	r2, #202	; 0xca
 800259c:	625a      	str	r2, [r3, #36]	; 0x24
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2253      	movs	r2, #83	; 0x53
 80025a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	491e      	ldr	r1, [pc, #120]	; (800262c <HAL_RTCEx_DeactivateWakeUpTimer+0xbc>)
 80025b2:	400a      	ands	r2, r1
 80025b4:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	491b      	ldr	r1, [pc, #108]	; (8002630 <HAL_RTCEx_DeactivateWakeUpTimer+0xc0>)
 80025c2:	400a      	ands	r2, r1
 80025c4:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 80025c6:	f7fe fb5b 	bl	8000c80 <HAL_GetTick>
 80025ca:	0003      	movs	r3, r0
 80025cc:	60fb      	str	r3, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80025ce:	e016      	b.n	80025fe <HAL_RTCEx_DeactivateWakeUpTimer+0x8e>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80025d0:	f7fe fb56 	bl	8000c80 <HAL_GetTick>
 80025d4:	0002      	movs	r2, r0
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	1ad2      	subs	r2, r2, r3
 80025da:	23fa      	movs	r3, #250	; 0xfa
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	429a      	cmp	r2, r3
 80025e0:	d90d      	bls.n	80025fe <HAL_RTCEx_DeactivateWakeUpTimer+0x8e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	22ff      	movs	r2, #255	; 0xff
 80025e8:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2221      	movs	r2, #33	; 0x21
 80025ee:	2103      	movs	r1, #3
 80025f0:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2220      	movs	r2, #32
 80025f6:	2100      	movs	r1, #0
 80025f8:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e012      	b.n	8002624 <HAL_RTCEx_DeactivateWakeUpTimer+0xb4>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	2204      	movs	r2, #4
 8002606:	4013      	ands	r3, r2
 8002608:	d0e2      	beq.n	80025d0 <HAL_RTCEx_DeactivateWakeUpTimer+0x60>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	22ff      	movs	r2, #255	; 0xff
 8002610:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2221      	movs	r2, #33	; 0x21
 8002616:	2101      	movs	r1, #1
 8002618:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2220      	movs	r2, #32
 800261e:	2100      	movs	r1, #0
 8002620:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	0018      	movs	r0, r3
 8002626:	46bd      	mov	sp, r7
 8002628:	b004      	add	sp, #16
 800262a:	bd80      	pop	{r7, pc}
 800262c:	fffffbff 	.word	0xfffffbff
 8002630:	ffffbfff 	.word	0xffffbfff

08002634 <__libc_init_array>:
 8002634:	b570      	push	{r4, r5, r6, lr}
 8002636:	2600      	movs	r6, #0
 8002638:	4d0c      	ldr	r5, [pc, #48]	; (800266c <__libc_init_array+0x38>)
 800263a:	4c0d      	ldr	r4, [pc, #52]	; (8002670 <__libc_init_array+0x3c>)
 800263c:	1b64      	subs	r4, r4, r5
 800263e:	10a4      	asrs	r4, r4, #2
 8002640:	42a6      	cmp	r6, r4
 8002642:	d109      	bne.n	8002658 <__libc_init_array+0x24>
 8002644:	2600      	movs	r6, #0
 8002646:	f000 f821 	bl	800268c <_init>
 800264a:	4d0a      	ldr	r5, [pc, #40]	; (8002674 <__libc_init_array+0x40>)
 800264c:	4c0a      	ldr	r4, [pc, #40]	; (8002678 <__libc_init_array+0x44>)
 800264e:	1b64      	subs	r4, r4, r5
 8002650:	10a4      	asrs	r4, r4, #2
 8002652:	42a6      	cmp	r6, r4
 8002654:	d105      	bne.n	8002662 <__libc_init_array+0x2e>
 8002656:	bd70      	pop	{r4, r5, r6, pc}
 8002658:	00b3      	lsls	r3, r6, #2
 800265a:	58eb      	ldr	r3, [r5, r3]
 800265c:	4798      	blx	r3
 800265e:	3601      	adds	r6, #1
 8002660:	e7ee      	b.n	8002640 <__libc_init_array+0xc>
 8002662:	00b3      	lsls	r3, r6, #2
 8002664:	58eb      	ldr	r3, [r5, r3]
 8002666:	4798      	blx	r3
 8002668:	3601      	adds	r6, #1
 800266a:	e7f2      	b.n	8002652 <__libc_init_array+0x1e>
 800266c:	080026c8 	.word	0x080026c8
 8002670:	080026c8 	.word	0x080026c8
 8002674:	080026c8 	.word	0x080026c8
 8002678:	080026cc 	.word	0x080026cc

0800267c <memset>:
 800267c:	0003      	movs	r3, r0
 800267e:	1812      	adds	r2, r2, r0
 8002680:	4293      	cmp	r3, r2
 8002682:	d100      	bne.n	8002686 <memset+0xa>
 8002684:	4770      	bx	lr
 8002686:	7019      	strb	r1, [r3, #0]
 8002688:	3301      	adds	r3, #1
 800268a:	e7f9      	b.n	8002680 <memset+0x4>

0800268c <_init>:
 800268c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800268e:	46c0      	nop			; (mov r8, r8)
 8002690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002692:	bc08      	pop	{r3}
 8002694:	469e      	mov	lr, r3
 8002696:	4770      	bx	lr

08002698 <_fini>:
 8002698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800269e:	bc08      	pop	{r3}
 80026a0:	469e      	mov	lr, r3
 80026a2:	4770      	bx	lr
